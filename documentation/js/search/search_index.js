var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AddTask.html",[0,0.055,1,0.717]],["body/classes/AddTask.html",[0,0.092,1,1.084,2,0.774,3,0.29,4,0.25,5,0.25,6,1.132,7,0.25,8,1.121,9,1.121,10,1.195,11,1.195,12,0.427,13,0.038,14,1.691,15,1.488,16,2.259,17,1.758,18,2.132,19,2.051,20,2.564,21,2.228,22,1.64,23,0.927,24,2.478,25,2.051,26,2.478,27,2.478,28,0.62,29,2.587,30,1.745,31,2.876,32,1.391,33,0.934,34,2.338,35,2.244,36,1.132,37,1.251,38,1.64,39,1.027,40,1.251,41,1.027,42,1.132,43,0.774,44,0.988,45,1.2,46,1.251,47,0.29,48,0.84,49,1.02,50,2.132,51,2.286,52,1.456,53,2.37,54,1.591,55,2.016,56,1.391,57,1.813,58,2.016,59,1.64,60,1.813,61,1.813,62,2.016,63,2.132,64,2.016,65,1.132,66,1.75,67,1.391,68,0.015,69,0.021,70,0.015]],["title/controllers/AppController.html",[71,1.928,72,1.928]],["body/controllers/AppController.html",[0,0.083,3,0.543,4,0.468,5,0.468,13,0.035,28,0.621,47,0.543,68,0.027,69,0.032,70,0.027,71,3.407,72,3.407,73,3.834,74,3.834,75,1.92]],["title/modules/AppModule.html",[76,1.72,77,1.928]],["body/modules/AppModule.html",[0,0.063,3,0.412,4,0.356,5,0.356,13,0.037,28,0.765,33,1.326,43,1.099,47,0.412,59,1.607,68,0.021,69,0.027,70,0.021,72,3.193,73,3.783,75,1.459,76,2.849,77,3.745,78,2.318,79,1.976,80,2.513,81,2.513,82,1.976,83,3.624,84,2.513,85,2.913,86,2.913,87,2.913,88,2.881,89,2.606,90,3.263,91,2.513,92,2.513,93,2.513,94,3.783,95,3.52,96,2.513,97,3.52,98,2.913,99,3.52,100,2.913,101,2.513,102,3.52,103,3.52,104,3.52,105,4.571,106,4.571,107,3.52,108,3.52,109,3.52,110,3.52,111,3.52]],["title/injectables/AppService.html",[89,1.399,112,1.399]],["body/injectables/AppService.html",[0,0.061,3,0.396,4,0.341,5,0.341,7,0.341,9,1.055,12,0.341,13,0.038,14,1.716,23,1.149,28,0.709,43,1.39,47,0.396,68,0.02,69,0.026,70,0.02,75,1.4,89,2.272,112,2.032,113,2.126,114,2.796,115,2.247,116,4.45,117,5.289,118,4.45,119,3.379,120,2.513,121,3.553,122,1.543,123,1.273,124,2.272,125,2.247,126,3.379,127,2.272,128,2.126,129,2.412,130,3.379,131,2.8,132,1.543,133,1.273,134,2.796,135,4.45,136,3.683,137,3.379,138,3.379,139,3.379,140,4.45,141,3.683,142,3.379]],["title/classes/DeleteTask.html",[0,0.055,49,0.871]],["body/classes/DeleteTask.html",[0,0.093,1,1.011,2,0.807,3,0.302,4,0.261,5,0.261,6,1.179,7,0.261,8,1.155,10,0.955,11,0.955,12,0.374,13,0.038,14,1.623,15,1.07,17,1.619,18,1.868,21,2.229,22,1.179,23,0.667,28,0.632,29,2.624,30,1.778,31,2.917,32,1.45,33,0.973,34,2.383,35,2.281,36,1.179,37,1.304,38,1.689,39,1.07,40,1.304,41,1.07,42,1.179,43,0.807,44,1.011,45,1.228,46,1.304,47,0.302,48,0.866,49,1.228,50,2.182,51,2.343,52,1.555,53,2.426,54,1.778,55,2.076,56,1.45,57,1.868,58,2.076,59,1.689,60,1.868,61,1.868,62,2.076,63,2.182,64,2.076,65,1.179,66,1.791,67,1.45,68,0.015,69,0.022,70,0.015,143,1.625,144,1.844,145,2.583]],["title/classes/FreeWord.html",[0,0.055,45,0.871]],["body/classes/FreeWord.html",[0,0.093,1,1.007,2,0.8,3,0.3,4,0.259,5,0.259,6,1.17,7,0.259,8,1.149,10,0.95,11,0.95,12,0.372,13,0.038,14,1.667,15,1.062,16,1.612,17,1.613,18,1.858,21,2.226,22,1.17,23,0.662,28,0.63,29,2.617,30,1.772,31,2.91,32,1.439,33,0.966,34,2.375,35,2.274,36,1.17,37,1.294,38,1.68,39,1.062,40,1.294,41,1.062,42,1.17,43,0.8,44,1.007,45,1.336,46,1.294,47,0.3,48,0.861,49,1.045,50,2.173,51,2.305,52,1.473,53,2.416,54,1.622,55,2.065,56,1.439,57,1.858,58,2.065,59,1.68,60,1.858,61,1.858,62,2.065,63,2.173,64,2.065,65,1.68,66,2.212,67,1.439,68,0.015,69,0.022,70,0.015,146,2.563,147,2.563]],["title/classes/GetTask.html",[0,0.055,44,0.717]],["body/classes/GetTask.html",[0,0.093,1,1.011,2,0.807,3,0.302,4,0.261,5,0.261,6,1.179,7,0.261,8,1.155,10,0.955,11,0.955,12,0.374,13,0.038,14,1.623,15,1.07,17,1.619,18,1.868,21,2.229,22,1.179,23,0.667,28,0.632,29,2.624,30,1.778,31,2.917,32,1.45,33,0.973,34,2.383,35,2.281,36,1.179,37,1.304,38,1.689,39,1.07,40,1.304,41,1.07,42,1.179,43,0.807,44,1.104,45,1.228,46,1.304,47,0.302,48,0.866,49,1.051,50,2.182,51,2.343,52,1.555,53,2.426,54,1.778,55,2.076,56,1.45,57,1.868,58,2.076,59,1.689,60,1.868,61,1.868,62,2.076,63,2.182,64,2.076,65,1.179,66,1.791,67,1.45,68,0.015,69,0.022,70,0.015,143,1.625,144,1.844,148,2.583]],["title/interfaces/ICRUDResolver.html",[149,1.155,150,1.547]],["body/interfaces/ICRUDResolver.html",[1,1.283,3,0.393,4,0.339,5,0.339,7,0.339,8,1.383,12,0.554,13,0.037,28,0.449,44,1.234,47,0.393,48,1.283,49,1.498,68,0.02,69,0.026,70,0.02,124,2.719,127,2.022,128,2.11,149,1.669,150,2.503,151,1.883,152,2.394,153,3.317,154,3.746,155,2.236,156,3.007,157,3.007,158,2.394,159,2.394,160,3.665,161,3.665,162,2.394]],["title/interfaces/ICRUDService.html",[149,1.155,155,1.547]],["body/interfaces/ICRUDService.html",[1,1.283,3,0.393,4,0.339,5,0.339,7,0.339,8,1.383,12,0.554,13,0.037,28,0.449,44,0.785,47,0.393,48,1.283,49,0.953,68,0.02,69,0.026,70,0.02,124,2.719,127,2.022,128,2.11,149,1.669,150,2.236,151,1.883,152,2.394,153,2.11,154,3.746,155,2.503,156,3.007,157,3.007,158,3.765,159,3.765,160,3.665,161,3.665,162,3.765]],["title/interfaces/ISoftDelete.html",[127,1.399,149,1.155]],["body/interfaces/ISoftDelete.html",[3,0.514,4,0.444,5,0.444,7,0.444,8,1.639,12,0.444,13,0.036,47,0.514,68,0.026,69,0.031,70,0.026,127,2.562,132,2.654,133,2.114,149,1.655,151,2.465,163,3.634,164,3.53]],["title/classes/Initialize1554305361058.html",[0,0.055,165,2.188]],["body/classes/Initialize1554305361058.html",[0,0.061,2,1.063,3,0.399,4,0.344,5,0.344,7,0.344,9,1.397,10,0.879,11,0.879,12,0.452,13,0.037,23,1.155,28,0.456,30,1.283,47,0.399,52,1.271,68,0.02,69,0.026,70,0.02,115,2.258,120,1.719,122,2.042,123,1.685,125,2.258,132,1.555,133,2.076,156,2.678,165,3.193,166,4.133,167,2.431,168,2.51,169,4.133,170,4.679,171,2.855,172,3.701,173,3.193,174,3.701,175,4.895,176,3.405,177,3.701,178,3.405,179,2.258,180,3.405,181,2.817,182,2.813,183,2.977,184,2.817,185,2.817,186,3.142,187,2.817,188,2.813,189,2.431,190,2.817,191,2.817,192,2.817,193,3.405]],["title/classes/Initialize1554305800476.html",[0,0.055,194,2.188]],["body/classes/Initialize1554305800476.html",[0,0.062,2,1.074,3,0.403,4,0.347,5,0.347,7,0.347,9,1.406,10,0.888,11,0.888,12,0.455,13,0.036,23,1.162,28,0.461,30,1.296,47,0.403,52,1.279,68,0.02,69,0.026,70,0.02,115,2.273,120,1.737,122,2.056,123,1.696,125,2.273,132,1.57,133,2.083,156,2.689,167,2.455,168,2.527,169,4.154,170,4.693,171,2.863,172,3.726,173,3.214,174,3.726,175,4.905,177,3.726,179,2.273,182,2.832,183,2.989,184,2.846,185,2.846,186,3.158,187,2.846,188,2.832,189,2.455,190,2.846,191,2.846,192,2.846,194,3.214,195,4.154,196,3.439,197,3.439,198,3.439,199,3.439]],["title/interfaces/SubscriptionResolverObject.html",[149,1.155,200,1.928]],["body/interfaces/SubscriptionResolverObject.html",[1,1.015,3,0.538,4,0.187,5,0.187,7,0.187,8,0.902,9,0.902,10,1.033,11,1.033,12,0.609,13,0.038,14,1.354,17,1.873,28,0.248,30,0.699,33,0.699,40,0.936,44,1.015,45,1.007,47,0.702,48,1.015,49,1.232,52,1.447,54,1.088,65,0.847,66,1.469,68,0.011,69,0.017,70,0.011,133,0.699,149,0.699,151,1.041,153,1.816,156,2.189,157,0.936,200,2.517,201,1.324,202,4.336,203,4.001,204,3.311,205,3.311,206,3.311,207,1.534,208,1.534,209,2.389,210,1.534,211,1.534,212,1.324,213,2.389,214,1.854,215,4.336,216,4.001,217,1.816,218,2.23,219,1.534,220,1.534,221,1.534,222,1.816,223,1.324,224,1.534,225,2.389,226,4.592,227,2.934,228,4.336,229,4.336,230,3.588,231,4.001,232,4.592,233,4.336,234,3.545,235,2.389,236,1.854,237,3.636,238,1.854,239,1.534,240,1.534,241,2.389,242,1.534,243,1.534,244,2.389,245,2.389,246,1.854,247,2.389,248,2.934,249,1.854,250,1.854,251,1.854,252,1.324,253,1.854,254,1.854,255,2.389,256,1.854,257,1.854]],["title/modules/TaskModule.html",[76,1.72,88,1.547]],["body/modules/TaskModule.html",[0,0.068,3,0.444,4,0.383,5,0.383,13,0.037,28,0.78,42,1.729,47,0.444,68,0.022,69,0.028,70,0.022,75,1.569,76,2.949,78,1.729,79,2.126,80,2.704,81,2.704,82,2.126,83,3.751,84,2.704,88,3.046,89,2.656,90,3.42,91,2.704,92,2.704,94,3.134,96,2.704,100,3.134,101,2.704,258,3.134,259,3.134,260,2.937,261,3.787,262,3.013,263,3.787,264,3.134,265,1.912,266,3.787]],["title/classes/TaskObject.html",[0,0.055,267,1.72]],["body/classes/TaskObject.html",[0,0.067,2,1.166,3,0.437,4,0.377,5,0.377,7,0.377,8,1.483,10,1.348,11,1.348,12,0.555,13,0.037,14,1.715,15,2.163,16,2.987,17,1.945,23,1.348,28,0.5,29,2.636,30,1.789,33,1.407,47,0.437,50,1.886,51,2.163,52,1.483,54,1.789,68,0.022,69,0.028,70,0.022,143,2.349,267,2.93,268,3.091,269,3.735,270,3.735,271,3.735,272,3.735,273,3.735]],["title/classes/TaskResolver.html",[0,0.055,262,1.928]],["body/classes/TaskResolver.html",[0,0.039,1,1.139,2,0.671,3,0.252,4,0.217,5,0.217,7,0.217,9,1.577,12,0.525,13,0.037,15,1.92,21,1.218,23,1.304,28,0.677,43,1.35,44,1.244,45,1.228,47,0.379,48,1.139,49,1.383,51,2.279,68,0.013,69,0.019,70,0.013,75,0.891,98,1.779,115,1.633,122,2.306,123,1.903,124,2.573,125,2.458,129,2.774,131,3.063,132,0.982,133,0.81,134,1.779,150,1.633,153,2.034,157,1.633,164,1.353,168,1.815,171,2.684,179,1.962,217,1.353,218,3.063,222,1.353,230,1.779,237,1.535,260,2.458,262,2.444,264,1.779,267,2.835,274,1.353,275,3.216,276,2.774,277,3.233,278,1.779,279,2.15,280,2.15,281,1.779,282,3.886,283,2.15,284,2.15,285,2.15,286,2.15,287,3.233,288,2.15,289,2.15,290,2.15,291,3.233,292,2.15,293,3.233,294,3.233,295,2.15,296,2.15,297,3.233,298,2.15,299,1.353,300,2.15,301,1.353,302,1.779,303,1.779,304,2.034,305,1.779,306,1.779,307,1.779,308,2.15,309,2.15,310,2.15,311,1.779,312,3.233,313,2.15,314,3.886,315,2.15,316,2.15,317,3.886,318,2.15,319,2.15,320,2.15,321,2.15,322,2.15,323,2.15,324,1.815,325,1.779,326,2.15,327,1.535]],["title/injectables/TaskService.html",[112,1.399,260,1.547]],["body/injectables/TaskService.html",[0,0.068,1,1.118,3,0.24,4,0.207,5,0.207,7,0.207,9,1.598,10,0.528,11,0.528,12,0.53,13,0.037,23,1.321,28,0.728,39,0.848,42,0.934,43,1.492,44,0.986,45,1.411,47,0.24,48,1.118,68,0.012,69,0.018,70,0.012,75,0.848,89,2.267,96,1.46,101,1.46,112,1.422,113,1.287,115,1.572,120,1.033,122,2.337,123,1.928,124,2.547,125,2.507,127,1.924,128,1.287,131,3.22,155,1.572,156,1.572,157,2.128,158,2.223,159,2.223,162,2.223,168,1.148,171,2.783,179,2.289,183,1.748,243,1.693,260,1.904,265,2.7,267,2.365,276,3.654,278,2.577,281,2.577,301,1.959,302,1.693,304,1.287,311,2.577,324,1.748,327,2.223,328,1.46,329,3.114,330,3.114,331,2.046,332,3.487,333,2.046,334,2.046,335,3.114,336,2.046,337,3.114,338,2.046,339,3.114,340,2.046,341,3.114,342,2.046,343,4.214,344,3.114,345,2.046,346,3.114,347,2.046,348,1.693,349,2.046,350,1.693,351,1.693,352,1.693,353,2.577,354,2.046,355,2.046,356,3.114,357,2.046,358,2.046,359,3.77,360,3.77,361,2.046,362,3.77,363,2.046,364,2.046,365,1.693,366,2.046,367,1.693,368,1.287,369,2.046,370,2.046,371,2.046,372,2.046,373,2.046,374,2.046,375,2.046,376,1.693]],["title/classes/TodoEntity.html",[0,0.055,265,1.547]],["body/classes/TodoEntity.html",[0,0.07,2,0.873,3,0.328,4,0.283,5,0.283,7,0.283,8,1.222,9,1.666,10,1.262,11,1.262,12,0.553,13,0.037,14,1.527,15,2.026,18,2.693,20,2.794,21,2.063,22,2.35,23,1.262,28,0.605,35,1.787,36,1.277,37,1.412,38,1.787,39,1.159,41,1.622,43,1.222,47,0.328,52,1.283,54,1.475,57,1.412,59,2.233,60,1.412,61,1.412,63,1.412,68,0.016,69,0.023,70,0.016,120,1.412,123,1.054,132,2.062,133,1.054,164,2.462,183,2.994,186,3.355,188,3.076,189,2.794,265,2.28,303,2.315,377,1.997,378,4.515,379,4.89,380,4.414,381,2.797,382,2.797,383,2.797,384,4.515,385,2.797,386,2.797,387,2.797,388,2.794,389,4.89,390,2.315,391,1.997,392,2.315,393,2.797,394,2.797,395,2.797,396,2.797,397,2.797,398,2.797,399,2.797]],["title/classes/UpdateTask.html",[0,0.055,48,0.717]],["body/classes/UpdateTask.html",[0,0.091,1,0.975,2,0.756,3,0.283,4,0.245,5,0.245,6,1.105,7,0.245,8,1.102,9,1.102,10,1.182,11,1.182,12,0.463,13,0.038,14,1.68,15,1.726,16,2.22,17,1.743,18,2.104,19,2.003,20,2.52,21,2.233,22,1.902,23,1.075,25,2.003,28,0.614,29,2.566,30,1.725,31,2.853,32,1.359,33,0.912,34,2.312,35,2.223,36,1.105,37,1.222,38,1.612,39,1.003,40,1.222,41,1.003,42,1.105,43,0.756,44,0.975,45,1.184,46,1.222,47,0.283,48,0.975,49,1.003,50,2.104,51,2.309,52,1.528,53,2.339,54,1.725,55,1.981,56,1.359,57,1.782,58,1.981,59,1.612,60,1.782,61,1.782,62,1.981,63,2.104,64,1.981,65,1.105,66,1.726,67,1.359,68,0.014,69,0.021,70,0.014,143,1.523,144,1.728,400,2.42,401,2.42,402,2.42]],["title/injectables/ValidationPipe.html",[112,1.399,299,1.928]],["body/injectables/ValidationPipe.html",[0,0.088,3,0.387,4,0.334,5,0.334,7,0.334,9,1.369,12,0.443,13,0.037,14,1.032,22,1.509,23,1.132,28,0.702,39,1.369,43,1.537,47,0.387,54,1.245,68,0.019,69,0.026,70,0.019,75,1.369,112,2.002,113,2.079,115,2.214,121,2.359,122,2.002,123,1.652,125,2.214,131,3.096,168,1.855,171,2.485,179,1.668,213,4.073,223,2.359,252,3.131,276,3.514,299,3.096,324,1.855,327,2.359,348,2.734,350,2.734,351,2.734,352,2.734,365,2.734,367,2.734,368,2.079,376,2.734,403,2.734,404,4.922,405,4.385,406,4.385,407,4.385,408,3.304,409,5.242,410,4.385,411,5.242,412,3.304,413,4.338,414,4.385,415,3.304,416,3.304,417,3.304,418,3.304,419,3.304,420,3.304]],["title/coverage.html",[421,2.976]],["body/coverage.html",[0,0.102,1,0.616,5,0.266,6,2.388,12,0.266,13,0.037,21,0.992,41,1.091,44,0.616,45,0.748,48,0.616,49,0.748,68,0.015,69,0.022,70,0.015,71,1.656,72,1.656,74,2.179,78,1.202,82,1.478,89,1.202,93,1.88,112,1.995,114,2.179,127,1.202,149,1.794,150,1.33,152,2.678,154,3.29,155,1.33,163,2.179,165,1.88,166,2.179,167,2.678,182,1.656,194,1.88,195,2.179,200,1.656,201,1.88,260,1.33,262,1.656,265,1.33,267,1.478,268,2.179,274,2.359,299,1.656,301,1.656,304,1.656,324,1.478,328,1.88,368,3.938,377,3.119,388,1.88,403,2.179,421,1.88,422,2.633,423,2.633,424,2.633,425,5.032,426,2.179,427,5.895,428,2.179,429,6.088,430,2.179,431,3.104,432,4.761,433,2.633,434,2.633,435,2.179,436,3.94,437,2.179,438,2.179,439,2.179,440,2.633,441,2.179,442,3.751,443,2.633,444,2.633,445,2.633,446,3.751,447,3.734,448,2.179,449,2.179,450,2.179,451,2.179,452,2.179,453,2.179,454,2.633]],["title/dependencies.html",[79,2.067,455,2.566]],["body/dependencies.html",[12,0.46,13,0.036,33,1.716,68,0.027,69,0.031,70,0.027,75,1.887,79,2.557,456,4.555,457,4.555,458,4.555,459,4.555,460,4.555,461,4.555,462,4.555,463,4.555,464,4.555,465,3.769,466,4.555]],["title/miscellaneous/functions.html",[467,1.296,468,3.047]],["body/miscellaneous/functions.html",[7,0.402,9,1.804,13,0.035,68,0.023,69,0.029,70,0.023,82,3.016,122,2.638,123,2.177,124,2.638,129,4.373,441,3.291,447,2.839,448,4.088,449,4.088,450,4.088,451,4.088,452,4.088,467,2.008,468,3.291,469,4.782,470,3.977,471,3.977,472,3.977,473,3.977,474,3.977,475,3.977]],["title/index.html",[7,0.259,476,2.566,477,2.566]],["body/index.html",[4,0.197,10,1.387,11,1.425,13,0.037,17,1.029,48,0.702,51,0.807,52,1.387,65,1.37,66,0.807,68,0.011,69,0.018,70,0.011,120,2.24,121,1.391,123,0.734,124,2.025,136,2.482,141,1.612,173,2.141,181,1.612,182,1.887,186,1.226,212,3.485,217,2.301,218,2.301,222,1.887,325,3.399,332,1.612,368,1.226,421,1.391,465,1.612,478,5.278,479,2.999,480,4.436,481,5.278,482,3.657,483,1.948,484,3.657,485,2.999,486,1.948,487,5.039,488,2.999,489,1.948,490,1.948,491,2.999,492,4.436,493,2.999,494,4.108,495,5.371,496,4.108,497,1.948,498,2.999,499,1.948,500,2.999,501,1.948,502,1.612,503,2.999,504,1.948,505,1.948,506,3.657,507,3.657,508,1.948,509,1.948,510,1.948,511,1.948,512,1.948,513,4.108,514,4.881,515,1.948,516,1.948,517,2.999,518,4.881,519,5.039,520,1.948,521,1.948,522,1.948,523,1.948,524,1.948,525,1.948,526,1.948,527,1.948,528,2.999,529,1.948,530,1.948,531,2.999,532,1.948,533,1.948,534,1.948,535,4.039,536,5.278,537,1.948,538,2.999,539,2.999,540,1.948,541,1.948,542,1.948,543,1.948,544,1.948,545,2.999,546,1.948,547,1.948,548,2.999,549,1.948,550,1.948,551,1.948,552,1.948,553,1.948,554,3.657,555,2.999,556,1.948,557,1.948,558,1.948,559,2.999,560,1.948,561,1.948,562,1.948,563,1.948,564,1.948,565,1.948,566,1.948,567,1.948,568,1.948,569,3.657,570,1.948,571,1.948,572,1.948,573,1.948,574,1.948,575,1.948,576,1.948,577,2.999,578,1.948,579,1.948,580,2.999,581,1.948,582,1.948,583,1.948,584,2.482,585,2.999,586,2.999,587,1.948,588,1.948,589,1.948,590,1.948,591,1.948,592,1.948,593,1.948,594,1.948,595,1.948,596,1.948,597,1.948,598,1.948,599,1.948,600,1.948,601,1.948,602,1.948,603,1.948,604,1.948,605,1.948,606,1.948,607,1.948,608,1.948,609,1.948]],["title/modules.html",[78,1.903]],["body/modules.html",[13,0.032,68,0.028,69,0.032,70,0.028,77,2.966,78,2.153,88,2.38,584,4.527,610,5.471,611,5.471,612,5.471]],["title/overview.html",[613,3.45]],["body/overview.html",[2,1.292,13,0.035,68,0.024,69,0.03,70,0.024,71,2.602,76,2.321,77,3.74,78,1.888,79,2.321,80,2.953,81,2.953,82,2.321,83,2.953,84,2.953,85,3.422,86,3.422,87,3.422,88,3.04,89,2.601,90,3.612,91,2.953,92,2.953,113,2.602,151,2.321,218,2.602,258,3.422,259,3.422,260,2.76,391,2.953,502,3.422,613,3.422,614,4.136,615,4.136]],["title/miscellaneous/typealiases.html",[467,1.296,616,3.682]],["body/miscellaneous/typealiases.html",[1,0.972,7,0.308,12,0.623,13,0.034,14,0.953,17,1.621,44,0.972,45,1.181,48,0.972,49,1.181,68,0.018,69,0.024,70,0.018,133,1.149,150,1.54,154,3.446,155,1.54,157,1.54,200,1.919,201,2.178,204,3.439,205,3.439,206,3.439,207,2.524,208,2.524,209,3.911,210,2.524,211,2.524,212,2.178,217,2.614,219,3.439,220,3.439,221,3.439,222,2.614,224,3.439,225,3.439,227,3.911,235,3.911,237,2.967,239,3.439,240,3.439,241,3.439,242,3.439,244,3.439,245,3.439,247,3.439,248,3.911,255,3.439,274,1.919,275,3.439,328,2.178,353,3.439,467,1.54,617,3.05,618,6.27,619,2.524,620,3.05,621,6.148]],["title/miscellaneous/variables.html",[467,1.296,622,3.047]],["body/miscellaneous/variables.html",[1,0.536,6,1.045,7,0.231,10,1.331,11,1.396,12,0.556,13,0.038,17,0.785,21,2.037,34,1.711,35,1.842,36,2.035,38,1.547,41,1.404,44,0.536,45,0.65,46,1.156,52,1.146,66,0.948,68,0.013,69,0.02,70,0.013,78,1.547,88,1.156,93,1.634,132,1.045,133,0.862,164,1.44,171,1.711,179,2.036,183,1.285,188,3.621,223,1.634,252,3.681,265,1.156,274,1.44,301,2.537,304,2.131,305,1.894,306,1.894,307,1.894,324,1.285,377,1.634,380,3.338,388,2.879,390,1.894,391,1.634,392,1.894,413,4.764,426,1.894,428,2.803,430,1.894,431,3.938,435,1.894,436,1.894,437,3.338,438,1.894,439,2.803,447,1.634,453,2.803,467,1.156,469,4.123,535,1.894,619,1.894,622,1.894,623,3.388,624,2.289,625,2.289,626,3.388,627,2.289,628,4.033,629,2.289,630,2.289,631,2.289,632,2.289,633,3.388,634,2.289,635,3.388,636,2.289,637,2.289,638,2.289,639,2.289,640,4.982,641,3.388,642,2.289,643,2.289,644,2.289,645,2.289]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"classes/AddTask.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"modules/TaskModule.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":368,"title":{},"body":{"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{}}}],["0.1.12",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["0.17.1",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":218,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"index.html":{},"overview.html":{}}}],["1/8",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":391,"title":{},"body":{"classes/TodoEntity.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":539,"title":{},"body":{"index.html":{}}}],["12",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["127.0.0.1",{"_index":534,"title":{},"body":{"index.html":{}}}],["2",{"_index":502,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.6.2",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":542,"title":{},"body":{"index.html":{}}}],["3",{"_index":614,"title":{},"body":{"overview.html":{}}}],["3.0.1",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":392,"title":{},"body":{"classes/TodoEntity.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":543,"title":{},"body":{"index.html":{}}}],["3306:3306",{"_index":522,"title":{},"body":{"index.html":{}}}],["4",{"_index":615,"title":{},"body":{"overview.html":{}}}],["6.0.1",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["6.2.2",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":121,"title":{},"body":{"injectables/AppService.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["_.includes(types",{"_index":420,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["aaa",{"_index":513,"title":{},"body":{"index.html":{}}}],["aaaaaaaaaaaaaa",{"_index":293,"title":{},"body":{"classes/TaskResolver.html":{}}}],["abc",{"_index":544,"title":{},"body":{"index.html":{}}}],["abcd",{"_index":537,"title":{},"body":{"index.html":{}}}],["actual",{"_index":211,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["add",{"_index":256,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["addtask",{"_index":1,"title":{"classes/AddTask.html":{}},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/UpdateTask.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["addtask(@args('addtask",{"_index":318,"title":{},"body":{"classes/TaskResolver.html":{}}}],["addtask(addtask",{"_index":512,"title":{},"body":{"index.html":{}}}],["addtask(p",{"_index":281,"title":{},"body":{"classes/TaskResolver.html":{},"injectables/TaskService.html":{}}}],["addtask.body.isstring.message",{"_index":62,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{}}}],["addtask.title.isnotempty.message",{"_index":56,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{}}}],["addtask.title.isstring.message",{"_index":55,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{}}}],["addtaskq",{"_index":448,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["addtaskq(p",{"_index":471,"title":{},"body":{"miscellaneous/functions.html":{}}}],["aliases",{"_index":617,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alter",{"_index":503,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":592,"title":{},"body":{"index.html":{}}}],["angular",{"_index":568,"title":{},"body":{"index.html":{}}}],["app",{"_index":574,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["app.interface",{"_index":128,"title":{},"body":{"injectables/AppService.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"injectables/TaskService.html":{}}}],["app.service",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["app_db",{"_index":485,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":72,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":565,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":77,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":89,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":230,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{}}}],["argumentmetadata",{"_index":411,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["array",{"_index":223,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":171,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["asynciterator",{"_index":238,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["author",{"_index":602,"title":{},"body":{"index.html":{}}}],["auto_increment",{"_index":184,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["autoschemafile",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":179,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":593,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":304,"title":{},"body":{"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["badrequestexception(errors",{"_index":369,"title":{},"body":{"injectables/TaskService.html":{}}}],["bash",{"_index":478,"title":{},"body":{"index.html":{}}}],["bbb",{"_index":514,"title":{},"body":{"index.html":{}}}],["bin)/typeorm",{"_index":496,"title":{},"body":{"index.html":{}}}],["body",{"_index":10,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":213,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":612,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":610,"title":{},"body":{"modules.html":{}}}],["build",{"_index":483,"title":{},"body":{"index.html":{}}}],["building",{"_index":560,"title":{},"body":{"index.html":{}}}],["built",{"_index":207,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["catch",{"_index":372,"title":{},"body":{"injectables/TaskService.html":{}}}],["cc",{"_index":510,"title":{},"body":{"index.html":{}}}],["character",{"_index":523,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}},"body":{"classes/AddTask.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"modules/TaskModule.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"overview.html":{}}}],["classのproperty",{"_index":364,"title":{},"body":{"injectables/TaskService.html":{}}}],["cluster_appmodule",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":258,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":259,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cnf",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collation",{"_index":526,"title":{},"body":{"index.html":{}}}],["column",{"_index":389,"title":{},"body":{"classes/TodoEntity.html":{}}}],["column({type",{"_index":378,"title":{},"body":{"classes/TodoEntity.html":{}}}],["comment",{"_index":186,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TodoEntity.html":{},"index.html":{}}}],["compodoc",{"_index":554,"title":{},"body":{"index.html":{}}}],["compose",{"_index":482,"title":{},"body":{"index.html":{}}}],["condition",{"_index":362,"title":{},"body":{"injectables/TaskService.html":{}}}],["config",{"_index":40,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/UpdateTask.html":{}}}],["config/message",{"_index":303,"title":{},"body":{"classes/TaskResolver.html":{},"classes/TodoEntity.html":{}}}],["const",{"_index":43,"title":{},"body":{"classes/AddTask.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{}}}],["constraints",{"_index":306,"title":{},"body":{"classes/TaskResolver.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":278,"title":{},"body":{"classes/TaskResolver.html":{},"injectables/TaskService.html":{}}}],["constructor(private",{"_index":310,"title":{},"body":{"classes/TaskResolver.html":{}}}],["constructor(taskservice",{"_index":279,"title":{},"body":{"classes/TaskResolver.html":{}}}],["constructor(todo",{"_index":331,"title":{},"body":{"injectables/TaskService.html":{}}}],["context",{"_index":232,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["controller",{"_index":71,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["coverage",{"_index":421,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":181,"title":{},"body":{"classes/Initialize1554305361058.html":{},"index.html":{}}}],["createconnection",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom",{"_index":208,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["d",{"_index":484,"title":{},"body":{"index.html":{}}}],["database",{"_index":548,"title":{},"body":{"index.html":{}}}],["date",{"_index":164,"title":{},"body":{"interfaces/ISoftDelete.html":{},"classes/TaskResolver.html":{},"classes/TodoEntity.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":479,"title":{},"body":{"index.html":{}}}],["debug",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}}}],["default",{"_index":188,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TodoEntity.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/AddTask.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":546,"title":{},"body":{"index.html":{}}}],["deleteat",{"_index":132,"title":{},"body":{"injectables/AppService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskResolver.html":{},"classes/TodoEntity.html":{},"miscellaneous/variables.html":{}}}],["deletetask",{"_index":49,"title":{"classes/DeleteTask.html":{}},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"classes/UpdateTask.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["deletetask(@args('deletetask",{"_index":322,"title":{},"body":{"classes/TaskResolver.html":{}}}],["deletetask(deletetask:{id",{"_index":515,"title":{},"body":{"index.html":{}}}],["deletetask(p",{"_index":284,"title":{},"body":{"classes/TaskResolver.html":{}}}],["deletetaskq",{"_index":449,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deletetaskq(p",{"_index":472,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dependencies",{"_index":79,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":249,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["description",{"_index":51,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"classes/UpdateTask.html":{},"index.html":{}}}],["dev",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["development",{"_index":575,"title":{},"body":{"index.html":{}}}],["directiveresolverfn",{"_index":242,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["doc",{"_index":552,"title":{},"body":{"index.html":{}}}],["doc/compodoc",{"_index":556,"title":{},"body":{"index.html":{}}}],["docker",{"_index":481,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["down",{"_index":172,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["down(queryrunner",{"_index":174,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["drop",{"_index":547,"title":{},"body":{"index.html":{}}}],["dto",{"_index":301,"title":{},"body":{"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["e",{"_index":136,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["e2e",{"_index":581,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":561,"title":{},"body":{"index.html":{}}}],["efg",{"_index":538,"title":{},"body":{"index.html":{}}}],["engine=innodb",{"_index":192,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["entities/todo.entity",{"_index":42,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/UpdateTask.html":{}}}],["entity",{"_index":388,"title":{},"body":{"classes/TodoEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["entity.todo.body",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity.todo.id",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity.todo.title",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":373,"title":{},"body":{"injectables/TaskService.html":{}}}],["errors",{"_index":365,"title":{},"body":{"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":367,"title":{},"body":{"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["escape",{"_index":135,"title":{},"body":{"injectables/AppService.html":{}}}],["exception",{"_index":437,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["exec",{"_index":530,"title":{},"body":{"index.html":{}}}],["execute",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":47,"title":{},"body":{"classes/AddTask.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"modules/TaskModule.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["faker.name.findname",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":394,"title":{},"body":{"classes/TodoEntity.html":{}}}],["false})@isnotempty({message",{"_index":386,"title":{},"body":{"classes/TodoEntity.html":{}}}],["field",{"_index":29,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TaskObject.html":{},"classes/UpdateTask.html":{}}}],["field(type",{"_index":50,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TaskObject.html":{},"classes/UpdateTask.html":{}}}],["field(undefined",{"_index":143,"title":{},"body":{"classes/DeleteTask.html":{},"classes/GetTask.html":{},"classes/TaskObject.html":{},"classes/UpdateTask.html":{}}}],["field({description",{"_index":16,"title":{},"body":{"classes/AddTask.html":{},"classes/FreeWord.html":{},"classes/TaskObject.html":{},"classes/UpdateTask.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddTask.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"modules/TaskModule.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["findonetask",{"_index":158,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"injectables/TaskService.html":{}}}],["findonetask(p",{"_index":335,"title":{},"body":{"injectables/TaskService.html":{}}}],["findtasks",{"_index":159,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"injectables/TaskService.html":{}}}],["findtasks(p",{"_index":337,"title":{},"body":{"injectables/TaskService.html":{}}}],["fixture",{"_index":428,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["float",{"_index":214,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["foo",{"_index":508,"title":{},"body":{"index.html":{}}}],["fragment",{"_index":236,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["framework",{"_index":559,"title":{},"body":{"index.html":{}}}],["freeword",{"_index":45,"title":{"classes/FreeWord.html":{}},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/UpdateTask.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["fuga",{"_index":541,"title":{},"body":{"index.html":{}}}],["function",{"_index":154,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":468,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getconnection().createquerybuilder",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gettask",{"_index":44,"title":{"classes/GetTask.html":{}},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/UpdateTask.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gettask(@args('gettask",{"_index":313,"title":{},"body":{"classes/TaskResolver.html":{}}}],["gettask(gettask",{"_index":511,"title":{},"body":{"index.html":{}}}],["gettask(p",{"_index":286,"title":{},"body":{"classes/TaskResolver.html":{}}}],["gettask.id.isnumber.message",{"_index":53,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{}}}],["gettaskq",{"_index":450,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gettaskq(p",{"_index":473,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gettasks",{"_index":153,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{}}}],["gettasks(@args('freeword",{"_index":315,"title":{},"body":{"classes/TaskResolver.html":{}}}],["gettasks(freeword",{"_index":509,"title":{},"body":{"index.html":{}}}],["gettasks(p",{"_index":289,"title":{},"body":{"classes/TaskResolver.html":{}}}],["gettasksq",{"_index":451,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gettasksq(p",{"_index":474,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":476,"title":{"index.html":{}},"body":{}}],["gql",{"_index":325,"title":{},"body":{"classes/TaskResolver.html":{},"index.html":{}}}],["graphql",{"_index":33,"title":{},"body":{"classes/AddTask.html":{},"modules/AppModule.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"classes/UpdateTask.html":{},"dependencies.html":{}}}],["graphqlmodule",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlresolveinfo",{"_index":226,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["grow",{"_index":589,"title":{},"body":{"index.html":{}}}],["h",{"_index":533,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":566,"title":{},"body":{"index.html":{}}}],["here",{"_index":599,"title":{},"body":{"index.html":{}}}],["hoge",{"_index":540,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/graphql",{"_index":551,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/voyager",{"_index":550,"title":{},"body":{"index.html":{}}}],["https://github.com/typeorm/typeorm/blob/master/docs/migrations.md",{"_index":505,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":606,"title":{},"body":{"index.html":{}}}],["icrudresolver",{"_index":150,"title":{"interfaces/ICRUDResolver.html":{}},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"classes/TaskResolver.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["icrudservice",{"_index":155,"title":{"interfaces/ICRUDService.html":{}},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":52,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id***'})@isnumber",{"_index":144,"title":{},"body":{"classes/DeleteTask.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{}}}],["identifier",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":375,"title":{},"body":{"injectables/TaskService.html":{}}}],["implements",{"_index":168,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":28,"title":{},"body":{"classes/AddTask.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"modules/TaskModule.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AddTask.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddTask.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"modules/TaskModule.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{}}}],["initialize",{"_index":499,"title":{},"body":{"index.html":{}}}],["initialize.ts",{"_index":167,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"coverage.html":{}}}],["initialize.ts:10",{"_index":176,"title":{},"body":{"classes/Initialize1554305361058.html":{}}}],["initialize.ts:4",{"_index":178,"title":{},"body":{"classes/Initialize1554305361058.html":{}}}],["initialize.ts:5",{"_index":197,"title":{},"body":{"classes/Initialize1554305800476.html":{}}}],["initialize.ts:9",{"_index":196,"title":{},"body":{"classes/Initialize1554305800476.html":{}}}],["initialize1554305361058",{"_index":165,"title":{"classes/Initialize1554305361058.html":{}},"body":{"classes/Initialize1554305361058.html":{},"coverage.html":{}}}],["initialize1554305800476",{"_index":194,"title":{"classes/Initialize1554305800476.html":{}},"body":{"classes/Initialize1554305800476.html":{},"coverage.html":{}}}],["injectable",{"_index":112,"title":{"injectables/AppService.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":349,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectrepository(todoentity",{"_index":354,"title":{},"body":{"injectables/TaskService.html":{}}}],["inputtype",{"_index":31,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{}}}],["insert",{"_index":535,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["inspired",{"_index":567,"title":{},"body":{"index.html":{}}}],["install",{"_index":572,"title":{},"body":{"index.html":{}}}],["installation",{"_index":571,"title":{},"body":{"index.html":{}}}],["installsubscriptionhandlers",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["instead",{"_index":253,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["int",{"_index":30,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"classes/UpdateTask.html":{}}}],["interface",{"_index":149,"title":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"interfaces/SubscriptionResolverObject.html":{}},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"interfaces/SubscriptionResolverObject.html":{},"coverage.html":{}}}],["interfaces",{"_index":151,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"interfaces/SubscriptionResolverObject.html":{},"overview.html":{}}}],["interfacetype",{"_index":32,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{}}}],["into(todoentity",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iresolvers",{"_index":255,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["isnotempty",{"_index":38,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"miscellaneous/variables.html":{}}}],["isnumber",{"_index":34,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{},"miscellaneous/variables.html":{}}}],["isoftdelete",{"_index":127,"title":{"interfaces/ISoftDelete.html":{}},"body":{"injectables/AppService.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["isstring",{"_index":35,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"miscellaneous/variables.html":{}}}],["isstring({message",{"_index":25,"title":{},"body":{"classes/AddTask.html":{},"classes/UpdateTask.html":{}}}],["istanbul",{"_index":374,"title":{},"body":{"injectables/TaskService.html":{}}}],["join",{"_index":595,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":603,"title":{},"body":{"index.html":{}}}],["key",{"_index":191,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["legend",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["length",{"_index":380,"title":{},"body":{"classes/TodoEntity.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":609,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":586,"title":{},"body":{"index.html":{}}}],["literal",{"_index":621,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lodash",{"_index":415,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["m",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mac",{"_index":532,"title":{},"body":{"index.html":{}}}],["makelike",{"_index":116,"title":{},"body":{"injectables/AppService.html":{}}}],["makelike(p",{"_index":118,"title":{},"body":{"injectables/AppService.html":{}}}],["makeware",{"_index":329,"title":{},"body":{"injectables/TaskService.html":{}}}],["makeware(p",{"_index":339,"title":{},"body":{"injectables/TaskService.html":{}}}],["mapped",{"_index":210,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["matching",{"_index":69,"title":{},"body":{"classes/AddTask.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"modules/TaskModule.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":36,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"miscellaneous/variables.html":{}}}],["maxlength(todoentitycnf.body.length",{"_index":63,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}}}],["maxlength(todoentitycnf.title.length",{"_index":57,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}}}],["maxlength(undefined.length",{"_index":146,"title":{},"body":{"classes/FreeWord.html":{}}}],["maybe",{"_index":206,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["memo",{"_index":507,"title":{},"body":{"index.html":{}}}],["message",{"_index":21,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TaskResolver.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["message.dto.task",{"_index":46,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{},"miscellaneous/variables.html":{}}}],["message.entity",{"_index":390,"title":{},"body":{"classes/TodoEntity.html":{},"miscellaneous/variables.html":{}}}],["message.exception.nothing",{"_index":307,"title":{},"body":{"classes/TaskResolver.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":409,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["methods",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["migration:create",{"_index":504,"title":{},"body":{"index.html":{}}}],["migration:generate",{"_index":497,"title":{},"body":{"index.html":{}}}],["migration:revert",{"_index":501,"title":{},"body":{"index.html":{}}}],["migration:run",{"_index":500,"title":{},"body":{"index.html":{}}}],["migrationinterface",{"_index":169,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["migrations/1554305800476",{"_index":195,"title":{},"body":{"classes/Initialize1554305800476.html":{},"coverage.html":{}}}],["miscellaneous",{"_index":467,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":585,"title":{},"body":{"index.html":{}}}],["mock",{"_index":489,"title":{},"body":{"index.html":{}}}],["mode",{"_index":577,"title":{},"body":{"index.html":{}}}],["module",{"_index":76,"title":{"modules/AppModule.html":{},"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["module/crudresolver.interface",{"_index":302,"title":{},"body":{"classes/TaskResolver.html":{},"injectables/TaskService.html":{}}}],["module/task/task.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["module/task/task.resolvers",{"_index":263,"title":{},"body":{"modules/TaskModule.html":{}}}],["modules",{"_index":78,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"coverage.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":598,"title":{},"body":{"index.html":{}}}],["mtpl",{"_index":439,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mtpl.isnotempty.m",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mtpl.isnumber.m",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mtpl.isstring.m",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mtpl.maxlength.m",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mtpl.nothing.m",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mutation",{"_index":217,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["mutation(returns",{"_index":317,"title":{},"body":{"classes/TaskResolver.html":{}}}],["mutation(undefined",{"_index":282,"title":{},"body":{"classes/TaskResolver.html":{}}}],["mutationaddtaskargs",{"_index":219,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["mutationdeletetaskargs",{"_index":221,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["mutationresolvers",{"_index":244,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["mutationupdatetaskargs",{"_index":220,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["mysql",{"_index":519,"title":{},"body":{"index.html":{}}}],["mysql:5.7.24",{"_index":517,"title":{},"body":{"index.html":{}}}],["mysql_database=task",{"_index":521,"title":{},"body":{"index.html":{}}}],["mysql_root_password=mysql",{"_index":520,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":604,"title":{},"body":{"index.html":{}}}],["n",{"_index":498,"title":{},"body":{"index.html":{}}}],["name",{"_index":123,"title":{},"body":{"injectables/AppService.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nest",{"_index":569,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":608,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":490,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/TaskModule.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"classes/TaskResolver.html":{}}}],["nestjs/typeorm",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["new",{"_index":324,"title":{},"body":{"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":243,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"injectables/TaskService.html":{}}}],["nextresolverfn",{"_index":241,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["node",{"_index":480,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":558,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":297,"title":{},"body":{"classes/TaskResolver.html":{}}}],["nothing",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":495,"title":{},"body":{"index.html":{}}}],["null",{"_index":133,"title":{},"body":{"injectables/AppService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"classes/TodoEntity.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":18,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}}}],["number",{"_index":54,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{}}}],["o.hasownproperty('body",{"_index":61,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}}}],["object",{"_index":252,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["objecttype",{"_index":272,"title":{},"body":{"classes/TaskObject.html":{}}}],["objecttype('task",{"_index":273,"title":{},"body":{"classes/TaskObject.html":{}}}],["open",{"_index":587,"title":{},"body":{"index.html":{}}}],["optional",{"_index":9,"title":{},"body":{"classes/AddTask.html":{},"injectables/AppService.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["overview",{"_index":613,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":124,"title":{},"body":{"injectables/AppService.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["p.txt",{"_index":361,"title":{},"body":{"injectables/TaskService.html":{}}}],["p2",{"_index":161,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{}}}],["package",{"_index":455,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"classes/TaskResolver.html":{}}}],["parameters",{"_index":122,"title":{},"body":{"injectables/AppService.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":228,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["parenttype",{"_index":246,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["pipe/validation.pipe",{"_index":300,"title":{},"body":{"classes/TaskResolver.html":{}}}],["pipetransform",{"_index":414,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass",{"_index":350,"title":{},"body":{"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":417,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(todoentity",{"_index":359,"title":{},"body":{"injectables/TaskService.html":{}}}],["playground",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":596,"title":{},"body":{"index.html":{}}}],["prefetch",{"_index":277,"title":{},"body":{"classes/TaskResolver.html":{}}}],["prefetch(p",{"_index":291,"title":{},"body":{"classes/TaskResolver.html":{}}}],["primary",{"_index":190,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["primarygeneratedcolumn",{"_index":384,"title":{},"body":{"classes/TodoEntity.html":{}}}],["private",{"_index":276,"title":{},"body":{"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["process.env.node_env",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["process.exit(0",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":578,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":557,"title":{},"body":{"index.html":{}}}],["project",{"_index":588,"title":{},"body":{"index.html":{}}}],["promise",{"_index":156,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"injectables/TaskService.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}}}],["property",{"_index":305,"title":{},"body":{"classes/TaskResolver.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["ps",{"_index":486,"title":{},"body":{"index.html":{}}}],["public",{"_index":170,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["pull",{"_index":516,"title":{},"body":{"index.html":{}}}],["query",{"_index":222,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["query(returns",{"_index":312,"title":{},"body":{"classes/TaskResolver.html":{}}}],["query(undefined",{"_index":287,"title":{},"body":{"classes/TaskResolver.html":{}}}],["querygettaskargs",{"_index":224,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["querygettasksargs",{"_index":225,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["queryresolvers",{"_index":245,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["queryrunner",{"_index":175,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["queryrunner.query",{"_index":180,"title":{},"body":{"classes/Initialize1554305361058.html":{}}}],["queryrunner.query(\"create",{"_index":198,"title":{},"body":{"classes/Initialize1554305800476.html":{}}}],["queryrunner.query(\"drop",{"_index":199,"title":{},"body":{"classes/Initialize1554305800476.html":{}}}],["queryrunner.query('drop",{"_index":193,"title":{},"body":{"classes/Initialize1554305361058.html":{}}}],["r",{"_index":129,"title":{},"body":{"injectables/AppService.html":{},"classes/TaskResolver.html":{},"miscellaneous/functions.html":{}}}],["r.compose",{"_index":142,"title":{},"body":{"injectables/AppService.html":{}}}],["ramda",{"_index":130,"title":{},"body":{"injectables/AppService.html":{}}}],["rdefault",{"_index":453,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["read",{"_index":597,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":311,"title":{},"body":{"classes/TaskResolver.html":{},"injectables/TaskService.html":{}}}],["reflect",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["replace(/%/g",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["replace(/\\\\/g",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["replace(/_/g",{"_index":139,"title":{},"body":{"injectables/AppService.html":{}}}],["repository",{"_index":332,"title":{},"body":{"injectables/TaskService.html":{},"index.html":{}}}],["reset",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["resolve",{"_index":202,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["resolver",{"_index":237,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"miscellaneous/typealiases.html":{}}}],["resolver(of",{"_index":309,"title":{},"body":{"classes/TaskResolver.html":{}}}],["resolverfn",{"_index":227,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["resolvers",{"_index":248,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["result",{"_index":68,"title":{},"body":{"classes/AddTask.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"modules/TaskModule.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":70,"title":{},"body":{"classes/AddTask.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"modules/TaskModule.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":131,"title":{},"body":{"injectables/AppService.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["returns",{"_index":125,"title":{},"body":{"injectables/AppService.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["rimraf",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":251,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["run",{"_index":518,"title":{},"body":{"index.html":{}}}],["running",{"_index":573,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["safesave",{"_index":330,"title":{},"body":{"injectables/TaskService.html":{}}}],["safesave(v",{"_index":341,"title":{},"body":{"injectables/TaskService.html":{}}}],["scalable",{"_index":562,"title":{},"body":{"index.html":{}}}],["scalars",{"_index":209,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["scalars['int",{"_index":216,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["scalars['string",{"_index":215,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["schemaspy",{"_index":553,"title":{},"body":{"index.html":{}}}],["script/.../index.ts",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script/fixture/index.ts",{"_index":426,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["script/fixture/todoentityfixture/index.ts",{"_index":430,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":545,"title":{},"body":{"index.html":{}}}],["server",{"_index":563,"title":{},"body":{"index.html":{}}}],["server=utf8",{"_index":525,"title":{},"body":{"index.html":{}}}],["server=utf8_unicode_ci",{"_index":527,"title":{},"body":{"index.html":{}}}],["set",{"_index":524,"title":{},"body":{"index.html":{}}}],["side",{"_index":564,"title":{},"body":{"index.html":{}}}],["softdeletetask",{"_index":162,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"injectables/TaskService.html":{}}}],["softdeletetask(t",{"_index":344,"title":{},"body":{"injectables/TaskService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddTask.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"modules/TaskModule.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["sponsors",{"_index":591,"title":{},"body":{"index.html":{}}}],["sql",{"_index":506,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../graphql.type.ts",{"_index":618,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../index.ts",{"_index":469,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":470,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../messagetemplate.ts",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../task.input.ts",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../task.resolvers.ts",{"_index":619,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../task.service.ts",{"_index":620,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../todo.entity.ts",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.interface.ts",{"_index":163,"title":{},"body":{"interfaces/ISoftDelete.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":114,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:13",{"_index":126,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:25",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config/fixture/index.ts",{"_index":435,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/message/index.ts",{"_index":436,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/message/messagetemplate.ts",{"_index":438,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/db/migrations/1554305361058",{"_index":166,"title":{},"body":{"classes/Initialize1554305361058.html":{},"coverage.html":{}}}],["src/entities/todo.entity.ts",{"_index":377,"title":{},"body":{"classes/TodoEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/todo.entity.ts:23",{"_index":385,"title":{},"body":{"classes/TodoEntity.html":{}}}],["src/entities/todo.entity.ts:37",{"_index":387,"title":{},"body":{"classes/TodoEntity.html":{}}}],["src/entities/todo.entity.ts:53",{"_index":382,"title":{},"body":{"classes/TodoEntity.html":{}}}],["src/entities/todo.entity.ts:61",{"_index":383,"title":{},"body":{"classes/TodoEntity.html":{}}}],["src/main.ts",{"_index":441,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/module/crudresolver.interface.ts",{"_index":152,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"coverage.html":{}}}],["src/module/task/dto/task.input.ts",{"_index":6,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/task/dto/task.input.ts:111",{"_index":400,"title":{},"body":{"classes/UpdateTask.html":{}}}],["src/module/task/dto/task.input.ts:126",{"_index":145,"title":{},"body":{"classes/DeleteTask.html":{}}}],["src/module/task/dto/task.input.ts:28",{"_index":148,"title":{},"body":{"classes/GetTask.html":{}}}],["src/module/task/dto/task.input.ts:45",{"_index":27,"title":{},"body":{"classes/AddTask.html":{}}}],["src/module/task/dto/task.input.ts:58",{"_index":24,"title":{},"body":{"classes/AddTask.html":{}}}],["src/module/task/dto/task.input.ts:72",{"_index":147,"title":{},"body":{"classes/FreeWord.html":{}}}],["src/module/task/dto/task.input.ts:87",{"_index":401,"title":{},"body":{"classes/UpdateTask.html":{}}}],["src/module/task/dto/task.input.ts:98",{"_index":402,"title":{},"body":{"classes/UpdateTask.html":{}}}],["src/module/task/dto/task.object.ts",{"_index":268,"title":{},"body":{"classes/TaskObject.html":{},"coverage.html":{}}}],["src/module/task/dto/task.object.ts:14",{"_index":271,"title":{},"body":{"classes/TaskObject.html":{}}}],["src/module/task/dto/task.object.ts:19",{"_index":269,"title":{},"body":{"classes/TaskObject.html":{}}}],["src/module/task/dto/task.object.ts:9",{"_index":270,"title":{},"body":{"classes/TaskObject.html":{}}}],["src/module/task/task.module.ts",{"_index":261,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/module/task/task.resolvers.ts",{"_index":274,"title":{},"body":{"classes/TaskResolver.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/module/task/task.resolvers.ts:27",{"_index":280,"title":{},"body":{"classes/TaskResolver.html":{}}}],["src/module/task/task.resolvers.ts:31",{"_index":288,"title":{},"body":{"classes/TaskResolver.html":{}}}],["src/module/task/task.resolvers.ts:36",{"_index":290,"title":{},"body":{"classes/TaskResolver.html":{}}}],["src/module/task/task.resolvers.ts:41",{"_index":283,"title":{},"body":{"classes/TaskResolver.html":{}}}],["src/module/task/task.resolvers.ts:46",{"_index":296,"title":{},"body":{"classes/TaskResolver.html":{}}}],["src/module/task/task.resolvers.ts:52",{"_index":285,"title":{},"body":{"classes/TaskResolver.html":{}}}],["src/module/task/task.resolvers.ts:62",{"_index":292,"title":{},"body":{"classes/TaskResolver.html":{}}}],["src/module/task/task.service.ts",{"_index":328,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/module/task/task.service.ts:22",{"_index":333,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/task/task.service.ts:29",{"_index":336,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/task/task.service.ts:35",{"_index":338,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/task/task.service.ts:42",{"_index":334,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/task/task.service.ts:47",{"_index":347,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/task/task.service.ts:52",{"_index":345,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/task/task.service.ts:57",{"_index":340,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/module/task/task.service.ts:69",{"_index":342,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/pipe/validation.pipe.ts",{"_index":403,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/pipe/validation.pipe.ts:15",{"_index":412,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/pipe/validation.pipe.ts:27",{"_index":408,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/share/gqlrepository/task/index.ts",{"_index":447,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/share/graphql.type.ts",{"_index":201,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/share/graphql/schema.graphql",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":528,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":488,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":579,"title":{},"body":{"index.html":{}}}],["started",{"_index":477,"title":{"index.html":{}},"body":{}}],["starter",{"_index":570,"title":{},"body":{"index.html":{}}}],["statements",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":404,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["stay",{"_index":600,"title":{},"body":{"index.html":{}}}],["stitchingresolver",{"_index":235,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["stop",{"_index":529,"title":{},"body":{"index.html":{}}}],["string",{"_index":14,"title":{},"body":{"classes/AddTask.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/typealiases.html":{}}}],["subscribe",{"_index":203,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["subscriptionresolvefn",{"_index":204,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["subscriptionresolver",{"_index":239,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["subscriptionresolverobject",{"_index":200,"title":{"interfaces/SubscriptionResolverObject.html":{}},"body":{"interfaces/SubscriptionResolverObject.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["subscriptionsubscribefn",{"_index":205,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["support",{"_index":584,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":611,"title":{},"body":{"modules.html":{}}}],["t",{"_index":157,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":182,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["targs",{"_index":231,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["task",{"_index":17,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"classes/UpdateTask.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["task.service",{"_index":264,"title":{},"body":{"modules/TaskModule.html":{},"classes/TaskResolver.html":{}}}],["task.todo",{"_index":536,"title":{},"body":{"index.html":{}}}],["taskmodule",{"_index":88,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["taskobject",{"_index":267,"title":{"classes/TaskObject.html":{}},"body":{"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["taskresolver",{"_index":262,"title":{"classes/TaskResolver.html":{}},"body":{"modules/TaskModule.html":{},"classes/TaskResolver.html":{},"coverage.html":{}}}],["taskresolvers",{"_index":247,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["taskresolvertype",{"_index":275,"title":{},"body":{"classes/TaskResolver.html":{},"miscellaneous/typealiases.html":{}}}],["taskservice",{"_index":260,"title":{"injectables/TaskService.html":{}},"body":{"modules/TaskModule.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["taskservicetype",{"_index":353,"title":{},"body":{"injectables/TaskService.html":{},"miscellaneous/typealiases.html":{}}}],["tcontext",{"_index":233,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["test",{"_index":492,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":583,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":582,"title":{},"body":{"index.html":{}}}],["tests",{"_index":580,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":590,"title":{},"body":{"index.html":{}}}],["this.appservice.makelike(p.txt",{"_index":363,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.appservice.throughdelete",{"_index":356,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.makeware(p",{"_index":357,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.prefetch(p",{"_index":314,"title":{},"body":{"classes/TaskResolver.html":{}}}],["this.safesave(v",{"_index":360,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.addtask(p",{"_index":319,"title":{},"body":{"classes/TaskResolver.html":{}}}],["this.taskservice.findonetask(p",{"_index":326,"title":{},"body":{"classes/TaskResolver.html":{}}}],["this.taskservice.findtasks(p",{"_index":316,"title":{},"body":{"classes/TaskResolver.html":{}}}],["this.taskservice.softdeletetask(t",{"_index":323,"title":{},"body":{"classes/TaskResolver.html":{}}}],["this.taskservice.updatetask(t",{"_index":321,"title":{},"body":{"classes/TaskResolver.html":{}}}],["this.todo.find",{"_index":358,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.todo.findone(p.id",{"_index":355,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.todo.save(v",{"_index":371,"title":{},"body":{"injectables/TaskService.html":{}}}],["throughdelete",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["throw",{"_index":327,"title":{},"body":{"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["timestamp",{"_index":189,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"classes/TodoEntity.html":{}}}],["title",{"_index":11,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":183,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"miscellaneous/variables.html":{}}}],["todo.body.isstring.message",{"_index":398,"title":{},"body":{"classes/TodoEntity.html":{}}}],["todo.title.isnotempty.message",{"_index":395,"title":{},"body":{"classes/TodoEntity.html":{}}}],["todoentity",{"_index":265,"title":{"classes/TodoEntity.html":{}},"body":{"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todoentitycnf",{"_index":41,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todoentitycnf.body.length",{"_index":397,"title":{},"body":{"classes/TodoEntity.html":{}}}],["todoentitycnf.body.length}${addtask.body.maxlength.message",{"_index":64,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{}}}],["todoentitycnf.body.length}${freeword.txt.maxlength.message",{"_index":67,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{}}}],["todoentitycnf.body.length}${todo.body.maxlength.message",{"_index":399,"title":{},"body":{"classes/TodoEntity.html":{}}}],["todoentitycnf.title.length",{"_index":393,"title":{},"body":{"classes/TodoEntity.html":{}}}],["todoentitycnf.title.length}${addtask.title.maxlength.message",{"_index":58,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/UpdateTask.html":{}}}],["todoentitycnf.title.length}${todo.title.maxlength.message",{"_index":396,"title":{},"body":{"classes/TodoEntity.html":{}}}],["todoentityfixture",{"_index":431,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":601,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":405,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":407,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tparent",{"_index":229,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["transform",{"_index":406,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":410,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":351,"title":{},"body":{"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["tresult",{"_index":234,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/AddTask.html":{},"modules/AppModule.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}}}],["true})@validateif(undefined)@isstring({message",{"_index":19,"title":{},"body":{"classes/AddTask.html":{},"classes/UpdateTask.html":{}}}],["try",{"_index":370,"title":{},"body":{"injectables/TaskService.html":{}}}],["ts",{"_index":494,"title":{},"body":{"index.html":{}}}],["tsconfig.json",{"_index":555,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":607,"title":{},"body":{"index.html":{}}}],["txt",{"_index":66,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/UpdateTask.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":12,"title":{},"body":{"classes/AddTask.html":{},"injectables/AppService.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/ISoftDelete.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":616,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"index.html":{}}}],["typeormmodule",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{}}}],["typeormmodule.forfeature([todoentity",{"_index":266,"title":{},"body":{"modules/TaskModule.html":{}}}],["typeormmodule.forroot",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["typeresolvefn",{"_index":240,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"miscellaneous/typealiases.html":{}}}],["types",{"_index":419,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":465,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["typesprefix",{"_index":257,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["u",{"_index":160,"title":{},"body":{"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{}}}],["undefined",{"_index":22,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{}}}],["undefined})@isnotempty({message",{"_index":26,"title":{},"body":{"classes/AddTask.html":{}}}],["undefined})@maxlength(undefined.length",{"_index":20,"title":{},"body":{"classes/AddTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}}}],["unit",{"_index":491,"title":{},"body":{"index.html":{}}}],["unprocessableentityexception",{"_index":348,"title":{},"body":{"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["unprocessableentityexception(errors",{"_index":376,"title":{},"body":{"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["up",{"_index":173,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{},"index.html":{}}}],["up(queryrunner",{"_index":177,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["updatetask",{"_index":48,"title":{"classes/UpdateTask.html":{}},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/ICRUDResolver.html":{},"interfaces/ICRUDService.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/TaskResolver.html":{},"injectables/TaskService.html":{},"classes/UpdateTask.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["updatetask(@args('updatetask",{"_index":320,"title":{},"body":{"classes/TaskResolver.html":{}}}],["updatetask(p",{"_index":295,"title":{},"body":{"classes/TaskResolver.html":{}}}],["updatetask(t",{"_index":346,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetaskq",{"_index":452,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["updatetaskq(p",{"_index":475,"title":{},"body":{"miscellaneous/functions.html":{}}}],["url",{"_index":549,"title":{},"body":{"index.html":{}}}],["uroot",{"_index":531,"title":{},"body":{"index.html":{}}}],["use",{"_index":250,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["usepipes",{"_index":298,"title":{},"body":{"classes/TaskResolver.html":{}}}],["usepipes(validationpipe",{"_index":308,"title":{},"body":{"classes/TaskResolver.html":{}}}],["v",{"_index":343,"title":{},"body":{"injectables/TaskService.html":{}}}],["validate",{"_index":352,"title":{},"body":{"injectables/TaskService.html":{},"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":418,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(v",{"_index":366,"title":{},"body":{"injectables/TaskService.html":{}}}],["validateif",{"_index":37,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}}}],["validateif(o",{"_index":60,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{}}}],["validateif(undefined)@isstring({message",{"_index":381,"title":{},"body":{"classes/TodoEntity.html":{}}}],["validationpipe",{"_index":299,"title":{"injectables/ValidationPipe.html":{}},"body":{"classes/TaskResolver.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validationpipe.tovalidate(metatype",{"_index":416,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validator",{"_index":39,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"injectables/TaskService.html":{},"classes/TodoEntity.html":{},"classes/UpdateTask.html":{},"injectables/ValidationPipe.html":{}}}],["value",{"_index":413,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":212,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["values(todoentityfixture",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":379,"title":{},"body":{"classes/TodoEntity.html":{}}}],["varchar(10",{"_index":185,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["varchar(30",{"_index":187,"title":{},"body":{"classes/Initialize1554305361058.html":{},"classes/Initialize1554305800476.html":{}}}],["variable",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":622,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["w",{"_index":141,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["watch",{"_index":576,"title":{},"body":{"index.html":{}}}],["website",{"_index":605,"title":{},"body":{"index.html":{}}}],["wish",{"_index":254,"title":{},"body":{"interfaces/SubscriptionResolverObject.html":{}}}],["wrap",{"_index":140,"title":{},"body":{"injectables/AppService.html":{}}}],["xxx",{"_index":65,"title":{},"body":{"classes/AddTask.html":{},"classes/DeleteTask.html":{},"classes/FreeWord.html":{},"classes/GetTask.html":{},"interfaces/SubscriptionResolverObject.html":{},"classes/UpdateTask.html":{},"index.html":{}}}],["xxx.entity.ts",{"_index":493,"title":{},"body":{"index.html":{}}}],["xxxxxxxxxxxxxxxxxxxxx",{"_index":294,"title":{},"body":{"classes/TaskResolver.html":{}}}],["yarn",{"_index":487,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":594,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddTask.html":{"url":"classes/AddTask.html","title":"class - AddTask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/Task.input.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                body\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            body\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({description: 'Task 補足やメモ', nullable: true})@ValidateIf(undefined)@IsString({message: undefined})@MaxLength(undefined.length, {message: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.input.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({description: 'Task のタイトル, 概要'})@IsString({message: undefined})@IsNotEmpty({message: undefined})@MaxLength(undefined.length, {message: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.input.ts:45\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, InputType, InterfaceType } from 'type-graphql';\nimport {\n  IsNumber,\n  IsString,\n  MaxLength,\n  ValidateIf,\n  IsNotEmpty,\n} from 'class-validator';\nimport { message } from 'config';\nimport { todoEntityCnf } from '../../../entities/Todo.entity';\n\nconst { getTask, freeWord, addTask } = message.dto.task;\n\nexport { GetTask, AddTask, FreeWord, UpdateTask, DeleteTask };\n\n@InputType()\nclass GetTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n}\n\n@InputType()\nclass AddTask {\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  @IsString({\n    message: addTask.title.isString.message,\n  })\n  @IsNotEmpty({\n    message: `${addTask.title.isNotEmpty.message}`,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${addTask.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n    nullable: true,\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: addTask.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${addTask.body.maxLength.message}`,\n  })\n  body?: string;\n}\n\n@InputType({\n  description:\n    '返却値の`String`が対象 高付加 & レスポンスが遅いので利用は計画的に!!',\n})\nclass FreeWord {\n  @Field({\n    description: '`xxx like %txt%` になる  `txt: \"\"` で全件取得',\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${freeWord.txt.maxLength.message}`,\n  })\n  txt: string;\n}\n\n// 多重継承が無いため冗長になることは回避不能\n@InputType()\nclass UpdateTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  @IsString({\n    message: addTask.title.isString.message,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${addTask.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n    nullable: true,\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: addTask.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${addTask.body.maxLength.message}`,\n  })\n  body?: string;\n}\n\n// 多重継承が無いため冗長になることは回避不能\n@InputType()\nclass DeleteTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller()\nexport class AppController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TaskModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from 'app.controller';\nimport { AppService } from 'app.service';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { TaskModule } from 'module/task/Task.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nexport { AppModule };\n\nconst modules = [TaskModule];\n\n@Module({\n  imports: [\n    ...modules,\n    GraphQLModule.forRoot({\n      typePaths: ['./**/*.graphql'],\n      debug: process.env.NODE_ENV === 'dev',\n      playground: process.env.NODE_ENV === 'dev',\n      installSubscriptionHandlers: true,\n      autoSchemaFile: 'src/share/graphql/schema.graphql',\n    }),\n    TypeOrmModule.forRoot(),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nclass AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                makeLike\n                            \n                            \n                                throughDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            makeLike\n                        \n                        \n                    \n                \n            \n            \n                \nmakeLike(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:25\n                \n            \n\n\n            \n                \n                    TypeORM 用の like 作成\nLike になる\n%_ 一文字検索可能\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            throughDelete\n                        \n                        \n                    \n                \n            \n            \n                \nthroughDelete()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:13\n                \n            \n\n\n            \n                \n                    論理削除用パラタメタ\n\n\n                    \n                        Returns :         ISoftDelete\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ISoftDelete } from 'app.interface';\nimport * as R from 'ramda';\nimport { Like } from 'typeorm';\n\nexport { AppService };\n\n@Injectable()\nclass AppService {\n  /**\n   * 論理削除用パラタメタ\n   */\n  throughDelete(): ISoftDelete {\n    return { deleteAt: null };\n  }\n\n  /**\n   * TypeORM 用の like 作成\n   * Like になる\n   *\n   * %\\_ 一文字検索可能\n   *\n   * @param p\n   */\n  makeLike(p: string) {\n    const escape = (e: string) =>\n      e\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/%/g, '\\\\%')\n        .replace(/_/g, '\\\\_');\n\n    const wrap = (w: string) => `%${w}%`;\n\n    return R.compose(\n      Like,\n      wrap,\n      escape,\n    )(p);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteTask.html":{"url":"classes/DeleteTask.html","title":"class - DeleteTask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/Task.input.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: '***対象id***'})@IsNumber({}, {message: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.input.ts:126\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, InputType, InterfaceType } from 'type-graphql';\nimport {\n  IsNumber,\n  IsString,\n  MaxLength,\n  ValidateIf,\n  IsNotEmpty,\n} from 'class-validator';\nimport { message } from 'config';\nimport { todoEntityCnf } from '../../../entities/Todo.entity';\n\nconst { getTask, freeWord, addTask } = message.dto.task;\n\nexport { GetTask, AddTask, FreeWord, UpdateTask, DeleteTask };\n\n@InputType()\nclass GetTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n}\n\n@InputType()\nclass AddTask {\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  @IsString({\n    message: addTask.title.isString.message,\n  })\n  @IsNotEmpty({\n    message: `${addTask.title.isNotEmpty.message}`,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${addTask.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n    nullable: true,\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: addTask.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${addTask.body.maxLength.message}`,\n  })\n  body?: string;\n}\n\n@InputType({\n  description:\n    '返却値の`String`が対象 高付加 & レスポンスが遅いので利用は計画的に!!',\n})\nclass FreeWord {\n  @Field({\n    description: '`xxx like %txt%` になる  `txt: \"\"` で全件取得',\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${freeWord.txt.maxLength.message}`,\n  })\n  txt: string;\n}\n\n// 多重継承が無いため冗長になることは回避不能\n@InputType()\nclass UpdateTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  @IsString({\n    message: addTask.title.isString.message,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${addTask.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n    nullable: true,\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: addTask.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${addTask.body.maxLength.message}`,\n  })\n  body?: string;\n}\n\n// 多重継承が無いため冗長になることは回避不能\n@InputType()\nclass DeleteTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FreeWord.html":{"url":"classes/FreeWord.html","title":"class - FreeWord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FreeWord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/Task.input.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                txt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            txt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({description: '`xxx like %txt%` になる  `txt: \"\"` で全件取得'})@MaxLength(undefined.length, {message: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.input.ts:72\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, InputType, InterfaceType } from 'type-graphql';\nimport {\n  IsNumber,\n  IsString,\n  MaxLength,\n  ValidateIf,\n  IsNotEmpty,\n} from 'class-validator';\nimport { message } from 'config';\nimport { todoEntityCnf } from '../../../entities/Todo.entity';\n\nconst { getTask, freeWord, addTask } = message.dto.task;\n\nexport { GetTask, AddTask, FreeWord, UpdateTask, DeleteTask };\n\n@InputType()\nclass GetTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n}\n\n@InputType()\nclass AddTask {\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  @IsString({\n    message: addTask.title.isString.message,\n  })\n  @IsNotEmpty({\n    message: `${addTask.title.isNotEmpty.message}`,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${addTask.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n    nullable: true,\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: addTask.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${addTask.body.maxLength.message}`,\n  })\n  body?: string;\n}\n\n@InputType({\n  description:\n    '返却値の`String`が対象 高付加 & レスポンスが遅いので利用は計画的に!!',\n})\nclass FreeWord {\n  @Field({\n    description: '`xxx like %txt%` になる  `txt: \"\"` で全件取得',\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${freeWord.txt.maxLength.message}`,\n  })\n  txt: string;\n}\n\n// 多重継承が無いため冗長になることは回避不能\n@InputType()\nclass UpdateTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  @IsString({\n    message: addTask.title.isString.message,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${addTask.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n    nullable: true,\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: addTask.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${addTask.body.maxLength.message}`,\n  })\n  body?: string;\n}\n\n// 多重継承が無いため冗長になることは回避不能\n@InputType()\nclass DeleteTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTask.html":{"url":"classes/GetTask.html","title":"class - GetTask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/Task.input.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: '***対象id***'})@IsNumber({}, {message: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.input.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, InputType, InterfaceType } from 'type-graphql';\nimport {\n  IsNumber,\n  IsString,\n  MaxLength,\n  ValidateIf,\n  IsNotEmpty,\n} from 'class-validator';\nimport { message } from 'config';\nimport { todoEntityCnf } from '../../../entities/Todo.entity';\n\nconst { getTask, freeWord, addTask } = message.dto.task;\n\nexport { GetTask, AddTask, FreeWord, UpdateTask, DeleteTask };\n\n@InputType()\nclass GetTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n}\n\n@InputType()\nclass AddTask {\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  @IsString({\n    message: addTask.title.isString.message,\n  })\n  @IsNotEmpty({\n    message: `${addTask.title.isNotEmpty.message}`,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${addTask.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n    nullable: true,\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: addTask.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${addTask.body.maxLength.message}`,\n  })\n  body?: string;\n}\n\n@InputType({\n  description:\n    '返却値の`String`が対象 高付加 & レスポンスが遅いので利用は計画的に!!',\n})\nclass FreeWord {\n  @Field({\n    description: '`xxx like %txt%` になる  `txt: \"\"` で全件取得',\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${freeWord.txt.maxLength.message}`,\n  })\n  txt: string;\n}\n\n// 多重継承が無いため冗長になることは回避不能\n@InputType()\nclass UpdateTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  @IsString({\n    message: addTask.title.isString.message,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${addTask.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n    nullable: true,\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: addTask.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${addTask.body.maxLength.message}`,\n  })\n  body?: string;\n}\n\n// 多重継承が無いため冗長になることは回避不能\n@InputType()\nclass DeleteTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICRUDResolver.html":{"url":"interfaces/ICRUDResolver.html","title":"interface - ICRUDResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ICRUDResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/crudResolver.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        addTask\n                                \n                                \n                                        deleteTask\n                                \n                                \n                                        getTask\n                                \n                                \n                                        getTasks\n                                \n                                \n                                        updateTask\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addTask\n                                    \n                                \n                                \n                                    \n                                        addTask:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteTask\n                                    \n                                \n                                \n                                    \n                                        deleteTask:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getTask\n                                    \n                                \n                                \n                                    \n                                        getTask:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getTasks\n                                    \n                                \n                                \n                                    \n                                        getTasks:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateTask\n                                    \n                                \n                                \n                                    \n                                        updateTask:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ISoftDelete } from 'app.interface';\n\nexport { ICRUDResolver, ICRUDService };\n\ninterface ICRUDResolver {\n  getTask: (p: any) => Promise | T;\n  getTasks: (p: any) => Promise | T[];\n  addTask: (p: any) => Promise | T;\n  updateTask: (p: any) => Promise | T;\n  deleteTask: (p: any) => Promise | T;\n}\n\ninterface ICRUDService {\n  findOneTask: (p: any) => Promise | T;\n  findTasks: (p: any) => Promise | T[];\n  addTask: (p: any) => Promise | T;\n  updateTask: (p: U, p2: any) => Promise | T;\n  softDeleteTask: (p: U, p2: ISoftDelete) => Promise | T;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICRUDService.html":{"url":"interfaces/ICRUDService.html","title":"interface - ICRUDService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ICRUDService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/crudResolver.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        addTask\n                                \n                                \n                                        findOneTask\n                                \n                                \n                                        findTasks\n                                \n                                \n                                        softDeleteTask\n                                \n                                \n                                        updateTask\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addTask\n                                    \n                                \n                                \n                                    \n                                        addTask:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findOneTask\n                                    \n                                \n                                \n                                    \n                                        findOneTask:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findTasks\n                                    \n                                \n                                \n                                    \n                                        findTasks:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        softDeleteTask\n                                    \n                                \n                                \n                                    \n                                        softDeleteTask:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateTask\n                                    \n                                \n                                \n                                    \n                                        updateTask:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ISoftDelete } from 'app.interface';\n\nexport { ICRUDResolver, ICRUDService };\n\ninterface ICRUDResolver {\n  getTask: (p: any) => Promise | T;\n  getTasks: (p: any) => Promise | T[];\n  addTask: (p: any) => Promise | T;\n  updateTask: (p: any) => Promise | T;\n  deleteTask: (p: any) => Promise | T;\n}\n\ninterface ICRUDService {\n  findOneTask: (p: any) => Promise | T;\n  findTasks: (p: any) => Promise | T[];\n  addTask: (p: any) => Promise | T;\n  updateTask: (p: U, p2: any) => Promise | T;\n  softDeleteTask: (p: U, p2: ISoftDelete) => Promise | T;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISoftDelete.html":{"url":"interfaces/ISoftDelete.html","title":"interface - ISoftDelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISoftDelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        deleteAt\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deleteAt\n                                    \n                                \n                                \n                                    \n                                        deleteAt:     Date | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export { ISoftDelete };\n\ninterface ISoftDelete {\n  deleteAt: Date | null;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Initialize1554305361058.html":{"url":"classes/Initialize1554305361058.html","title":"class - Initialize1554305361058","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Initialize1554305361058\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/migrations/1554305361058-Initialize.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/db/migrations/1554305361058-Initialize.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                                QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/db/migrations/1554305361058-Initialize.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                                QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class Initialize1554305361058 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      \"CREATE TABLE `todo` (`id` int NOT NULL AUTO_INCREMENT, `title` varchar(10) NOT NULL COMMENT 'todo のタイトル, 概要', `body` varchar(30) NULL COMMENT 'todo 補足やメモ' DEFAULT '', `deleteAt` timestamp NULL COMMENT '論理削除' DEFAULT null, PRIMARY KEY (`id`)) ENGINE=InnoDB\",\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query('DROP TABLE `todo`');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Initialize1554305800476.html":{"url":"classes/Initialize1554305800476.html","title":"class - Initialize1554305800476","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Initialize1554305800476\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1554305800476-Initialize.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1554305800476-Initialize.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                                QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1554305800476-Initialize.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                                QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class Initialize1554305800476 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"CREATE TABLE `todo` (`id` int NOT NULL AUTO_INCREMENT, `title` varchar(10) NOT NULL COMMENT 'todo のタイトル, 概要', `body` varchar(30) NULL COMMENT 'todo 補足やメモ' DEFAULT '', `deleteAt` timestamp NULL COMMENT '論理削除' DEFAULT null, PRIMARY KEY (`id`)) ENGINE=InnoDB\");\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(\"DROP TABLE `todo`\");\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscriptionResolverObject.html":{"url":"interfaces/SubscriptionResolverObject.html","title":"interface - SubscriptionResolverObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SubscriptionResolverObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/share/graphql.type.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        resolve\n                                \n                                \n                                        subscribe\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        resolve\n                                    \n                                \n                                \n                                    \n                                        resolve:         SubscriptionResolveFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SubscriptionResolveFn\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscribe\n                                    \n                                \n                                \n                                    \n                                        subscribe:         SubscriptionSubscribeFn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SubscriptionSubscribeFn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type Maybe = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AddTask = {\n  /** Task のタイトル, 概要 */\n  title: Scalars['String'];\n  /** Task 補足やメモ */\n  body?: Maybe;\n};\n\nexport type DeleteTask = {\n  /** ***対象id*** */\n  id: Scalars['Int'];\n};\n\n/** 返却値の`String`が対象 高付加 & レスポンスが遅いので利用は計画的に!! */\nexport type FreeWord = {\n  /** `xxx like %txt%` になる  `txt: \"\"` で全件取得 */\n  txt: Scalars['String'];\n};\n\nexport type GetTask = {\n  /** ***対象id*** */\n  id: Scalars['Int'];\n};\n\nexport type Mutation = {\n  /** タククを1件追加 */\n  addTask: Task;\n  /** タスクを1件更新 */\n  updateTask: Task;\n  /** タスクを1件論理削除 */\n  deleteTask: Task;\n};\n\nexport type MutationAddTaskArgs = {\n  AddTask: AddTask;\n};\n\nexport type MutationUpdateTaskArgs = {\n  UpdateTask: UpdateTask;\n};\n\nexport type MutationDeleteTaskArgs = {\n  DeleteTask: DeleteTask;\n};\n\nexport type Query = {\n  /** タスクの取得 */\n  getTask: Task;\n  /** 複数タスクの取得 */\n  getTasks: Array;\n};\n\nexport type QueryGetTaskArgs = {\n  GetTask: GetTask;\n};\n\nexport type QueryGetTasksArgs = {\n  FreeWord: FreeWord;\n};\n\n/** Task の詳細情報 */\nexport type Task = {\n  id: Scalars['Int'];\n  /** Task のタイトル, 概要 */\n  title: Scalars['String'];\n  /** Task 補足やメモ */\n  body: Scalars['String'];\n};\n\nexport type UpdateTask = {\n  /** ***対象id*** */\n  id: Scalars['Int'];\n  /** Task のタイトル, 概要 */\n  title: Scalars['String'];\n  /** Task 補足やメモ */\n  body?: Maybe;\n};\n\nimport { GraphQLResolveInfo } from 'graphql';\n\nexport type ResolverFn = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => Promise | TResult;\n\nexport type StitchingResolver = {\n  fragment: string;\n  resolve: ResolverFn;\n};\n\nexport type Resolver =\n  | ResolverFn\n  | StitchingResolver;\n\nexport type SubscriptionSubscribeFn = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => AsyncIterator | Promise>;\n\nexport type SubscriptionResolveFn = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => TResult | Promise;\n\nexport interface SubscriptionResolverObject {\n  subscribe: SubscriptionSubscribeFn;\n  resolve?: SubscriptionResolveFn;\n}\n\nexport type SubscriptionResolver =\n  | ((\n      ...args: any[]\n    ) => SubscriptionResolverObject)\n  | SubscriptionResolverObject;\n\nexport type TypeResolveFn = (\n  parent: TParent,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => Maybe;\n\nexport type NextResolverFn = () => Promise;\n\nexport type DirectiveResolverFn = (\n  next: NextResolverFn,\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo,\n) => TResult | Promise;\n\nexport type MutationResolvers = {\n  addTask?: Resolver;\n  updateTask?: Resolver;\n  deleteTask?: Resolver;\n};\n\nexport type QueryResolvers = {\n  getTask?: Resolver;\n  getTasks?: Resolver, ParentType, Context, QueryGetTasksArgs>;\n};\n\nexport type TaskResolvers = {\n  id?: Resolver;\n  title?: Resolver;\n  body?: Resolver;\n};\n\nexport type Resolvers = {\n  Mutation?: MutationResolvers;\n  Query?: QueryResolvers;\n  Task?: TaskResolvers;\n};\n\n/**\n * @deprecated\n * Use \"Resolvers\" root object instead. If you wish to get \"IResolvers\", add \"typesPrefix: I\" to your config.\n */\nexport type IResolvers = Resolvers;\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nAppService->TaskModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/task/Task.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            TaskService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TaskResolver } from 'module/task/Task.resolvers';\nimport { TaskService } from './Task.service';\nimport { TodoEntity } from 'entities/Todo.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppService } from 'app.service';\n\nexport { TaskModule };\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TodoEntity])],\n  providers: [TaskResolver, TaskService, AppService],\n})\nclass TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskObject.html":{"url":"classes/TaskObject.html","title":"class - TaskObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/Task.object.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                id\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            body\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({description: 'Task 補足やメモ'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.object.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.object.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({description: 'Task のタイトル, 概要'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.object.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from 'type-graphql';\n\nexport { TaskObject };\n\n@ObjectType('Task', { description: 'Task の詳細情報' })\nclass TaskObject {\n  @Field(type => Int)\n  id: number;\n\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n  })\n  body: string;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskResolver.html":{"url":"classes/TaskResolver.html","title":"class - TaskResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/Task.resolvers.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            TaskResolverType\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                getTask\n                            \n                            \n                                getTasks\n                            \n                            \n                                    Private\n                                    Async\n                                preFetch\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/module/task/Task.resolvers.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addTask\n                        \n                        \n                    \n                \n            \n            \n                \naddTask(p: AddTask)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'タククを1件追加'})\n                \n            \n\n            \n                \n                    Defined in src/module/task/Task.resolvers.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                AddTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(p: DeleteTask)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'タスクを1件論理削除'})\n                \n            \n\n            \n                \n                    Defined in src/module/task/Task.resolvers.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                DeleteTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTask\n                        \n                        \n                    \n                \n            \n            \n                \ngetTask(p: GetTask)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {description: 'タスクの取得'})\n                \n            \n\n            \n                \n                    Defined in src/module/task/Task.resolvers.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                GetTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(p: FreeWord)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {description: '複数タスクの取得'})\n                \n            \n\n            \n                \n                    Defined in src/module/task/Task.resolvers.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                FreeWord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            preFetch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    preFetch(p: GetTask)\n                \n            \n\n\n            \n                \n                    Defined in src/module/task/Task.resolvers.ts:62\n                \n            \n\n\n            \n                \n                    aaaaaaaaaaaaaa\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                GetTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        xxxxxxxxxxxxxxxxxxxxx\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(p: UpdateTask)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined, {description: 'タスクを1件更新'})\n                \n            \n\n            \n                \n                    Defined in src/module/task/Task.resolvers.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                UpdateTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver, Args, Mutation } from '@nestjs/graphql';\nimport { NotFoundException, UsePipes } from '@nestjs/common';\nimport { TaskService } from './Task.service';\nimport { ValidationPipe } from 'pipe/Validation.pipe';\nimport {\n  TaskObject,\n  GetTask,\n  FreeWord,\n  AddTask,\n  UpdateTask,\n  DeleteTask,\n} from './dto';\nimport { ICRUDResolver } from 'module/crudResolver.interface';\nimport { message } from 'config/message';\n\nexport { TaskResolver };\n\ntype TaskResolverType = ICRUDResolver;\n\nexport const badRequestException = {\n  property: null,\n  constraints: message.exception.nothing,\n};\n\n@UsePipes(ValidationPipe)\n@Resolver(of => TaskObject)\nclass TaskResolver implements TaskResolverType {\n  constructor(private readonly taskService: TaskService) {}\n\n  @Query(returns => TaskObject, { description: 'タスクの取得' })\n  getTask(@Args('GetTask') p: GetTask) {\n    return this.preFetch(p);\n  }\n\n  @Query(returns => [TaskObject], { description: '複数タスクの取得' })\n  getTasks(@Args('FreeWord') p: FreeWord) {\n    return this.taskService.findTasks(p);\n  }\n\n  @Mutation(returns => TaskObject, { description: 'タククを1件追加' })\n  addTask(@Args('AddTask') p: AddTask) {\n    return this.taskService.addTask(p);\n  }\n\n  @Mutation(returns => TaskObject, { description: 'タスクを1件更新' })\n  async updateTask(@Args('UpdateTask') p: UpdateTask) {\n    const t = await this.preFetch(p);\n    return this.taskService.updateTask(t, p);\n  }\n\n  @Mutation(returns => TaskObject, { description: 'タスクを1件論理削除' })\n  async deleteTask(@Args('DeleteTask') p: DeleteTask) {\n    const t = await this.preFetch(p);\n    return this.taskService.softDeleteTask(t, { deleteAt: new Date() });\n  }\n\n  // デコレータで定義可能だが、型とGQLの相性が悪い\n  /**\n   * aaaaaaaaaaaaaa\n   * @param p xxxxxxxxxxxxxxxxxxxxx\n   */\n  private async preFetch(p: GetTask) {\n    const r = await this.taskService.findOneTask(p);\n    if (!r) {\n      throw new NotFoundException({\n        message: [{ ...badRequestException }],\n      });\n    }\n    return r;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/Task.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTask\n                            \n                            \n                                findOneTask\n                            \n                            \n                                findTasks\n                            \n                            \n                                    Private\n                                makeWare\n                            \n                            \n                                    Private\n                                    Async\n                                safeSave\n                            \n                            \n                                    Async\n                                softDeleteTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todo: Repository, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in src/module/task/Task.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                        AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTask(p: AddTask)\n                \n            \n\n\n            \n                \n                    Defined in src/module/task/Task.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                AddTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOneTask\n                        \n                        \n                    \n                \n            \n            \n                \nfindOneTask(p: GetTask)\n                \n            \n\n\n            \n                \n                    Defined in src/module/task/Task.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                GetTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findTasks\n                        \n                        \n                    \n                \n            \n            \n                \nfindTasks(p: FreeWord)\n                \n            \n\n\n            \n                \n                    Defined in src/module/task/Task.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                FreeWord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            makeWare\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    makeWare(p: FreeWord)\n                \n            \n\n\n            \n                \n                    Defined in src/module/task/Task.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                FreeWord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            safeSave\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    safeSave(v: TodoEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/module/task/Task.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                TodoEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            softDeleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    softDeleteTask(t: TodoEntity, p: ISoftDelete)\n                \n            \n\n\n            \n                \n                    Defined in src/module/task/Task.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    t\n                                    \n                                                TodoEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    p\n                                    \n                                                ISoftDelete\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(t: TodoEntity, p: UpdateTask)\n                \n            \n\n\n            \n                \n                    Defined in src/module/task/Task.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    t\n                                    \n                                                TodoEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    p\n                                    \n                                                UpdateTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { TodoEntity } from 'entities/Todo.entity';\nimport { Repository } from 'typeorm';\nimport { GetTask, FreeWord, AddTask, UpdateTask } from './dto';\nimport { plainToClass } from 'class-transformer';\nimport { TaskObject } from './dto';\nimport { ICRUDService } from 'module/crudResolver.interface';\nimport { ISoftDelete } from 'app.interface';\nimport { AppService } from 'app.service';\nimport { validate } from 'class-validator';\n\nexport { TaskService };\n\ntype TaskServiceType = ICRUDService;\n\n@Injectable()\nclass TaskService implements TaskServiceType {\n  constructor(\n    @InjectRepository(TodoEntity)\n    private readonly todo: Repository,\n    private readonly appService: AppService,\n  ) {}\n\n  findOneTask(p: GetTask) {\n    return (this.todo.findOne(p.id, {\n      where: { ...this.appService.throughDelete() },\n    }) as any) as TaskObject;\n  }\n\n  findTasks(p: FreeWord) {\n    const where = this.makeWare(p);\n    return (this.todo.find({\n      where: { ...where, ...this.appService.throughDelete() },\n    }) as any) as TaskObject[];\n  }\n\n  async addTask(p: AddTask) {\n    const v = plainToClass(TodoEntity, p);\n    return await this.safeSave(v);\n  }\n\n  async updateTask(t: TodoEntity, p: UpdateTask) {\n    const v = plainToClass(TodoEntity, { ...t, ...p });\n    return await this.safeSave(v);\n  }\n\n  async softDeleteTask(t: TodoEntity, p: ISoftDelete) {\n    const v = plainToClass(TodoEntity, { ...t, ...p });\n    return await this.safeSave(v);\n  }\n\n  private makeWare(p: FreeWord) {\n    if (p.txt === '') {\n      return [];\n    }\n    const condition = this.appService.makeLike(p.txt);\n    // classのpropertyをなめて、抽出可能だが省略\n    return {\n      title: condition,\n      body: condition,\n    };\n  }\n\n  private async safeSave(v: TodoEntity): Promise {\n    const errors = await validate(v);\n    if (errors.length > 0) {\n      throw new BadRequestException(errors);\n    }\n\n    try {\n      return ((await this.todo.save(v)) as any) as TaskObject;\n    } catch (error) {\n      /* istanbul ignore next */\n      throw new UnprocessableEntityException(errors);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoEntity.html":{"url":"classes/TodoEntity.html","title":"class - TodoEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/Todo.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                body\n                            \n                            \n                                    Optional\n                                deleteAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            body\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', comment: 'todo 補足やメモ', length: undefined, nullable: true, default: ''})@ValidateIf(undefined)@IsString({message: undefined})@MaxLength(undefined.length, {message: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/Todo.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deleteAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'timestamp', comment: '論理削除', nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/Todo.entity.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/Todo.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', comment: 'todo のタイトル, 概要', length: undefined, nullable: false})@IsNotEmpty({message: undefined})@MaxLength(undefined.length, {message: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/Todo.entity.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\nimport { IsNotEmpty, IsString, MaxLength, ValidateIf } from 'class-validator';\nimport { message } from 'config/message';\n\nconst { todo } = message.entity;\n\nexport { todoEntityCnf, TodoEntity };\n\nconst todoEntityCnf = {\n  title: {\n    length: 10,\n  },\n  body: {\n    length: 30,\n  },\n};\n\n@Entity({\n  name: 'todo',\n})\nclass TodoEntity {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column({\n    type: 'varchar',\n    comment: 'todo のタイトル, 概要',\n    length: todoEntityCnf.title.length,\n    nullable: false,\n  })\n  @IsNotEmpty({\n    message: `${todo.title.isNotEmpty.message}`,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${todo.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Column({\n    type: 'varchar',\n    comment: 'todo 補足やメモ',\n    length: todoEntityCnf.body.length,\n    nullable: true,\n    default: '',\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: todo.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${todo.body.maxLength.message}`,\n  })\n  body?: string;\n\n  @Column({\n    type: 'timestamp',\n    comment: '論理削除',\n    nullable: true,\n    default: null,\n  })\n  deleteAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTask.html":{"url":"classes/UpdateTask.html","title":"class - UpdateTask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/task/dto/Task.input.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                body\n                            \n                            \n                                id\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            body\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({description: 'Task 補足やメモ', nullable: true})@ValidateIf(undefined)@IsString({message: undefined})@MaxLength(undefined.length, {message: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.input.ts:111\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined, {description: '***対象id***'})@IsNumber({}, {message: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.input.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({description: 'Task のタイトル, 概要'})@IsString({message: undefined})@MaxLength(undefined.length, {message: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/task/dto/Task.input.ts:98\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, InputType, InterfaceType } from 'type-graphql';\nimport {\n  IsNumber,\n  IsString,\n  MaxLength,\n  ValidateIf,\n  IsNotEmpty,\n} from 'class-validator';\nimport { message } from 'config';\nimport { todoEntityCnf } from '../../../entities/Todo.entity';\n\nconst { getTask, freeWord, addTask } = message.dto.task;\n\nexport { GetTask, AddTask, FreeWord, UpdateTask, DeleteTask };\n\n@InputType()\nclass GetTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n}\n\n@InputType()\nclass AddTask {\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  @IsString({\n    message: addTask.title.isString.message,\n  })\n  @IsNotEmpty({\n    message: `${addTask.title.isNotEmpty.message}`,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${addTask.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n    nullable: true,\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: addTask.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${addTask.body.maxLength.message}`,\n  })\n  body?: string;\n}\n\n@InputType({\n  description:\n    '返却値の`String`が対象 高付加 & レスポンスが遅いので利用は計画的に!!',\n})\nclass FreeWord {\n  @Field({\n    description: '`xxx like %txt%` になる  `txt: \"\"` で全件取得',\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${freeWord.txt.maxLength.message}`,\n  })\n  txt: string;\n}\n\n// 多重継承が無いため冗長になることは回避不能\n@InputType()\nclass UpdateTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n\n  @Field({\n    description: 'Task のタイトル, 概要',\n  })\n  @IsString({\n    message: addTask.title.isString.message,\n  })\n  @MaxLength(todoEntityCnf.title.length, {\n    message: `${todoEntityCnf.title.length}${addTask.title.maxLength.message}`,\n  })\n  title: string;\n\n  @Field({\n    description: 'Task 補足やメモ',\n    nullable: true,\n  })\n  @ValidateIf(o => o.hasOwnProperty('body'))\n  @IsString({\n    message: addTask.body.isString.message,\n  })\n  @MaxLength(todoEntityCnf.body.length, {\n    message: `${todoEntityCnf.body.length}${addTask.body.maxLength.message}`,\n  })\n  body?: string;\n}\n\n// 多重継承が無いため冗長になることは回避不能\n@InputType()\nclass DeleteTask {\n  @Field(type => Int, {\n    description: '***対象id***',\n  })\n  @IsNumber(\n    {},\n    {\n      message: getTask.id.isNumber.message,\n    },\n  )\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipe/Validation.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            toValidate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipe/Validation.pipe.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/pipe/Validation.pipe.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\nimport * as _ from 'lodash';\n\nexport { ValidationPipe };\n\n@Injectable()\nclass ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !ValidationPipe.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new UnprocessableEntityException(errors);\n    }\n    return value;\n  }\n\n  private static toValidate(metatype: any): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !_.includes(types, metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                migrations/1554305800476-Initialize.ts\n            \n            class\n            Initialize1554305800476\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                script/fixture/index.ts\n            \n            variable\n            fixture\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                script/fixture/todoEntityFixture/index.ts\n            \n            variable\n            TodoEntityFixture\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.interface.ts\n            \n            interface\n            ISoftDelete\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            modules\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/config/fixture/index.ts\n            \n            variable\n            todoEntityFixture\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/message/index.ts\n            \n            variable\n            dto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/message/index.ts\n            \n            variable\n            entity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/message/index.ts\n            \n            variable\n            exception\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/message/index.ts\n            \n            variable\n            message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/message/messageTemplate.ts\n            \n            variable\n            mTPL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/db/migrations/1554305361058-Initialize.ts\n            \n            class\n            Initialize1554305361058\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entities/Todo.entity.ts\n            \n            class\n            TodoEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/Todo.entity.ts\n            \n            variable\n            todoEntityCnf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/Todo.entity.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/crudResolver.interface.ts\n            \n            interface\n            ICRUDResolver\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/crudResolver.interface.ts\n            \n            interface\n            ICRUDService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/task/Task.resolvers.ts\n            \n            class\n            TaskResolver\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/module/task/Task.resolvers.ts\n            \n            variable\n            badRequestException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/task/Task.service.ts\n            \n            injectable\n            TaskService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/module/task/dto/Task.input.ts\n            \n            class\n            AddTask\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/task/dto/Task.input.ts\n            \n            class\n            DeleteTask\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/task/dto/Task.input.ts\n            \n            class\n            FreeWord\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/task/dto/Task.input.ts\n            \n            class\n            GetTask\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/task/dto/Task.input.ts\n            \n            class\n            UpdateTask\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/task/dto/Task.input.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/task/dto/Task.object.ts\n            \n            class\n            TaskObject\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pipe/Validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/share/gqlRepository/task/index.ts\n            \n            function\n            addTaskQ\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/share/gqlRepository/task/index.ts\n            \n            function\n            deleteTaskQ\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/share/gqlRepository/task/index.ts\n            \n            function\n            getTaskQ\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/share/gqlRepository/task/index.ts\n            \n            function\n            getTasksQ\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/share/gqlRepository/task/index.ts\n            \n            function\n            updateTaskQ\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/share/gqlRepository/task/index.ts\n            \n            variable\n            rDefault\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/share/graphql.type.ts\n            \n            interface\n            SubscriptionResolverObject\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.0.1\n        \n            reflect-metadata : ^0.1.12\n        \n            rimraf : ^2.6.2\n        \n            rxjs : ^6.2.2\n        \n            type-graphql : ^0.17.1\n        \n            typescript : ^3.0.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addTaskQ   (src/.../index.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            deleteTaskQ   (src/.../index.ts)\n                        \n                        \n                            getTaskQ   (src/.../index.ts)\n                        \n                        \n                            getTasksQ   (src/.../index.ts)\n                        \n                        \n                            updateTaskQ   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/share/gqlRepository/task/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            addTaskQ\n                        \n                        \n                    \n                \n            \n            \n                \naddTaskQ(p, r)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    r\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTaskQ\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTaskQ(p, r)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    r\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskQ\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskQ(p, r)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    r\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasksQ\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasksQ(p, r)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    r\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskQ\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskQ(p, r)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    r\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n通常の開発環境\n```bash\ndb のみ起動 して nodeはローカルで dockerのホットリロードが遅いため\ndocker-compose up --build -d app_db;  docker-compose ps\nyarn start:dev\n```\n開発環境でのテスト\n```bash\nDB関連の操作不可 -> つまり mockにする\nnestjsの思想, unit testの思想\nyarn test\n```\nTypeORM で マイグレーション (初回)\nxxx.entity.ts でモデル定義  \n```bash\nマイグレーションファイル作成\nyarn ts-node $(npm bin)/typeorm migration:generate -n Initialize\nマイグレーション 実行\nyarn ts-node $(npm bin)/typeorm migration:run\nマイグレーション 戻し\nyarn ts-node $(npm bin)/typeorm migration:revert\n```\nTypeORM で マイグレーション (2回目以降)\n```bash\nマイグレーション 実行\nyarn ts-node $(npm bin)/typeorm migration:run\n```\nTypeORM で Alter Table したい\nxxx.entity.ts でモデル更新\n```bash\nこれを育てる\ntypeorm migration:create -n Xxx\n```\nhttps://github.com/typeorm/typeorm/blob/master/docs/migrations.md\n\n他に方法無し...\n\nTypeOrm テーブル コメントつけたい\nたぶん、今のとこはない 追加予定らしい  \nsql\nALTER TABLE xxx COMMENT 'タスクを管理'\nGQL memo\n```gql\nquery  {\n  foo: getTasks(FreeWord: {txt: \"\"}) {\n    id\n    title\n    body\n  }\n}\nquery  {\n  cc: getTask(GetTask: {id: 1}) {\n    id\n    title\n  }}\nmutation {\n  addTask(AddTask: {title: \"aaa\" body: \"bbb\"}) {\n    id\n    title\n    body\n  }\n}\nmutation {\n  updateTask(\n    UpdateTask:{\n      id: 1\n      title: \"aaa\"\n      body: \"bbb\"\n    }) {\n    id\n  }\n}\nmutation {\n deleteTask(DeleteTask:{id: 1}) {\n     id\n     title\n }\n}\n```\ndocker memo\n```bash\n初期\ndocker pull mysql:5.7.24\ndocker run -d --name mysql -e MYSQL_ROOT_PASSWORD=mysql -e MYSQL_DATABASE=task -p 3306:3306  mysql:5.7.24 --character-set-server=utf8 --collation-server=utf8_unicode_ci\n開始\ndocker start mysql\n停止\ndocker stop mysql\n対話形式\ndocker exec -it mysql bash\nmysql -uroot -p\nmysql\nmac から\nmysql -uroot -p -h 127.0.0.1\n```\nsql memo\n```sql\ninsert into task.todo (title, body) values (\"aaa\", \"abcd efg\");\ninsert into task.todo (title, body) values (\"aaa\", \"100%\");\ninsert into task.todo (title, body) values (\"bbb\", \"0% % \");\ninsert into task.todo (title, body) values (\"bbb\", \"hoge fuga\");\ninsert into task.todo (title, body) values (\"bbb\", \"100% 200% 300%\");\ninsert into task.todo (title, body) values (\"bbb\", \"_ abc efg\");\ninsert into task.todo (title, body) values (\"bbb\", \"\\\");\nselect * from task.todo;\ndelete from task.todo; select * from task.todo;\ndrop database task; create database task;\n```\nurl\n\nhttp://localhost:3000/voyager\n\nGQL関連全体像\n\n\nhttp://localhost:3000/graphql\n\nGQLプレイグラウンド\n\n\n\ndoc\n\nmysql\ndocker-compose up app_db schemaspy\n\n\ncompodoc\nyarn compodoc -p tsconfig.json -d doc/compodoc\nyarn compodoc -p tsconfig.json -w # サーバ起動 & 監視\n\n\n\n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nbash\n$ npm install\nRunning the app\n```bash\ndevelopment\n$ npm run start\nwatch mode\n$ npm run start:dev\nproduction mode\n$ npm run start:prod\n```\nTest\n```bash\nunit tests\n$ npm run test\ne2e tests\n$ npm run test:e2e\ntest coverage\n$ npm run test:cov\n```\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nTaskModule\n\nTaskModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nTaskModule -->\n\nAppService->TaskModule\n\n\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AddTask   (src/.../graphql.type.ts)\n                        \n                        \n                            DeleteTask   (src/.../graphql.type.ts)\n                        \n                        \n                            DirectiveResolverFn   (src/.../graphql.type.ts)\n                        \n                        \n                            FreeWord   (src/.../graphql.type.ts)\n                        \n                        \n                            GetTask   (src/.../graphql.type.ts)\n                        \n                        \n                            IResolvers   (src/.../graphql.type.ts)\n                        \n                        \n                            Maybe   (src/.../graphql.type.ts)\n                        \n                        \n                            Mutation   (src/.../graphql.type.ts)\n                        \n                        \n                            MutationAddTaskArgs   (src/.../graphql.type.ts)\n                        \n                        \n                            MutationDeleteTaskArgs   (src/.../graphql.type.ts)\n                        \n                        \n                            MutationResolvers   (src/.../graphql.type.ts)\n                        \n                        \n                            MutationUpdateTaskArgs   (src/.../graphql.type.ts)\n                        \n                        \n                            NextResolverFn   (src/.../graphql.type.ts)\n                        \n                        \n                            Query   (src/.../graphql.type.ts)\n                        \n                        \n                            QueryGetTaskArgs   (src/.../graphql.type.ts)\n                        \n                        \n                            QueryGetTasksArgs   (src/.../graphql.type.ts)\n                        \n                        \n                            QueryResolvers   (src/.../graphql.type.ts)\n                        \n                        \n                            Resolver   (src/.../graphql.type.ts)\n                        \n                        \n                            ResolverFn   (src/.../graphql.type.ts)\n                        \n                        \n                            Resolvers   (src/.../graphql.type.ts)\n                        \n                        \n                            Scalars   (src/.../graphql.type.ts)\n                        \n                        \n                            StitchingResolver   (src/.../graphql.type.ts)\n                        \n                        \n                            SubscriptionResolveFn   (src/.../graphql.type.ts)\n                        \n                        \n                            SubscriptionResolver   (src/.../graphql.type.ts)\n                        \n                        \n                            SubscriptionSubscribeFn   (src/.../graphql.type.ts)\n                        \n                        \n                            Task   (src/.../graphql.type.ts)\n                        \n                        \n                            TaskResolvers   (src/.../graphql.type.ts)\n                        \n                        \n                            TaskResolverType   (src/.../Task.resolvers.ts)\n                        \n                        \n                            TaskServiceType   (src/.../Task.service.ts)\n                        \n                        \n                            TypeResolveFn   (src/.../graphql.type.ts)\n                        \n                        \n                            UpdateTask   (src/.../graphql.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/share/graphql.type.ts\n    \n    \n        \n            \n                \n                    \n                    AddTask\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeleteTask\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DirectiveResolverFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FreeWord\n                \n            \n            \n                \n                    返却値のStringが対象 高付加 & レスポンスが遅いので利用は計画的に!! \n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GetTask\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IResolvers\n                \n            \n            \n                \n                        Resolvers\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Maybe\n                \n            \n            \n                \n                        T | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Mutation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationAddTaskArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationDeleteTaskArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationResolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MutationUpdateTaskArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextResolverFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Query\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryGetTaskArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryGetTasksArgs\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryResolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Resolver\n                \n            \n            \n                \n                        ResolverFn | StitchingResolver\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResolverFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Resolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Scalars\n                \n            \n            \n                \n                    All built-in and custom scalars, mapped to their actual values \n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StitchingResolver\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SubscriptionResolveFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SubscriptionResolver\n                \n            \n            \n                \n                             | SubscriptionResolverObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SubscriptionSubscribeFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Task\n                \n            \n            \n                \n                    Task の詳細情報 \n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TaskResolvers\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TypeResolveFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateTask\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/module/task/Task.resolvers.ts\n    \n    \n        \n            \n                \n                    \n                    TaskResolverType\n                \n            \n            \n                \n                            ICRUDResolver\n\n                \n            \n        \n    \n    src/module/task/Task.service.ts\n    \n    \n        \n            \n                \n                    \n                    TaskServiceType\n                \n            \n            \n                \n                            ICRUDService\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            badRequestException   (src/.../Task.resolvers.ts)\n                        \n                        \n                            dto   (src/.../index.ts)\n                        \n                        \n                            entity   (src/.../index.ts)\n                        \n                        \n                            exception   (src/.../index.ts)\n                        \n                        \n                            fixture   (script/.../index.ts)\n                        \n                        \n                            message   (src/.../index.ts)\n                        \n                        \n                            modules   (src/.../app.module.ts)\n                        \n                        \n                            mTPL   (src/.../messageTemplate.ts)\n                        \n                        \n                            rDefault   (src/.../index.ts)\n                        \n                        \n                            todoEntityCnf   (src/.../Todo.entity.ts)\n                        \n                        \n                            todoEntityFixture   (src/.../index.ts)\n                        \n                        \n                            TodoEntityFixture   (script/.../index.ts)\n                        \n                        \n                               (src/.../Todo.entity.ts)\n                        \n                        \n                               (src/.../Task.input.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/module/task/Task.resolvers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            badRequestException\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  property: null,\n  constraints: message.exception.nothing,\n}\n                        \n                    \n\n\n            \n        \n\n    src/config/message/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dto\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  task: {\n    freeWord: {\n      txt: {\n        maxLength: {\n          message: mTPL.maxLength.m,\n        },\n      },\n    },\n    getTask: {\n      id: entity.todo.id,\n    },\n    addTask: {\n      title: entity.todo.title,\n      body: entity.todo.body,\n    },\n  },\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            entity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  todo: {\n    id: {\n      isNumber: {\n        message: mTPL.isNumber.m,\n      },\n    },\n    title: {\n      isString: {\n        message: mTPL.isString.m,\n      },\n      isNotEmpty: {\n        message: mTPL.isNotEmpty.m,\n      },\n      maxLength: {\n        message: mTPL.maxLength.m,\n      },\n    },\n    body: {\n      isString: {\n        message: mTPL.isString.m,\n      },\n      maxLength: {\n        message: mTPL.maxLength.m,\n      },\n    },\n  },\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            exception\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  nothing: mTPL.nothing.m,\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  exception,\n  dto,\n  entity,\n}\n                        \n                    \n\n\n            \n        \n\n    script/fixture/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async () => {\n  await createConnection({ ...cnf });\n  await TodoEntityFixture();\n\n  process.exit(0);\n}\n                        \n                    \n\n\n            \n        \n\n    src/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modules\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [TaskModule]\n                        \n                    \n\n\n            \n        \n\n    src/config/message/messageTemplate.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mTPL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  nothing: {\n    m: '対象データがありません',\n  },\n  isString: {\n    m: '文字列にしてください。',\n  },\n  maxLength: {\n    m: '文字以下にしてください。',\n  },\n  isNotEmpty: {\n    m: 'を入力にしてください。',\n  },\n  isNumber: {\n    m: '数値にしてください。',\n  },\n  length: {\n    m: '文字にしてください。',\n  },\n}\n                        \n                    \n\n\n            \n        \n\n    src/share/gqlRepository/task/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rDefault\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Array\n\n                        \n                    \n                    \n                        \n                            Default value : ['id', 'title', 'body']\n                        \n                    \n\n\n            \n        \n\n    src/entities/Todo.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            todoEntityCnf\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  title: {\n    length: 10,\n  },\n  body: {\n    length: 30,\n  },\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : message.entity\n                        \n                    \n\n\n            \n        \n\n    src/config/fixture/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            todoEntityFixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TodoEntity[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    title: 'ゴミ捨て',\n    deleteAt: new Date(),\n  },\n  {\n    title: '会議をする',\n    body: `田中さんに参加依頼を出す`,\n  },\n  {\n    title: 'ランチに行く',\n  },\n  {\n    title: '会議をする',\n    body: `${faker.name.findName()}さんに参加依頼を出す`,\n  },\n  {\n    title: 'ランチ予約',\n    body: `${faker.name.findName()}さんも`,\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    script/fixture/todoEntityFixture/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TodoEntityFixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async () => {\n  await getConnection().createQueryBuilder()\n    .insert()\n    .into(TodoEntity)\n    .values(todoEntityFixture)\n    .execute();\n}\n                        \n                    \n\n\n            \n        \n\n    src/module/task/dto/Task.input.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : message.dto.task\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
